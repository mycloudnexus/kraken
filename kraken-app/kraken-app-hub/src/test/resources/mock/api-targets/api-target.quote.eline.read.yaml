---
kind: kraken.component.api-target
apiVersion: v1
metadata:
  key: mef.sonata.api-target.quote.eline.read
  name: Quote Connection API
  mapperKey: mef.sonata.api-target-mapper.quote.eline.read
  version: 1
spec:
  inputs:
    - mefQuery
    - mefRequestBody
    - entity
  trigger:
    path: /mefApi/sonata/quoteManagement/v8/quote/{id}
    method: get
    productType: access_e_line
  endpoints:
    - id: retrieve quote for connection
      path: ""
      method: ""
      requestBody: ${entity.request.quoteItem[0].product.productConfiguration.access_e_line}
      responseBody: |
        {
          "id": "${entity.id}",
          "relatedContactInformation": "${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation('sellerContactInformation', env.seller.name, env.seller.emailAddress, env.seller.number, entity.request.relatedContactInformation)}",
          "buyerRequestedQuoteLevel": "${entity.request.buyerRequestedQuoteLevel}",
          "quoteItem": [
            {
              "product": "${entity.request.quoteItem[0].product}",
              "state": "@{{quoteItem[*].state}}",
              "quoteItemPrice": {
                "price": {
                  "dutyFreeAmount": {
                   "unit": "@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.unit}}",
                   "value": "@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.value}}"
                  }
                }
              }
            }
          ],
          "quoteDate": "${T(com.consoleconnect.kraken.operator.core.toolkit.DateTime).nowInUTCFormatted()}",
          "externalId":"${entity.request[externalId]?:''}",
          "instantSyncQuote":"${entity.request[instantSyncQuote]?:''}",
          "requestedQuoteCompletionDate": "${entity.request[requestedQuoteCompletionDate]?:''}"
        }