kind: kraken.component.api-target-spec
metadata:
  name: mock seller API
  version: 3
  key: mef.sonata.api-target-spec.moc1724294477571
  labels: {}
facets:
  environments:
    stage: 'https://1c01f826-3948-42c2-a00f-150b54364d3b.mock.pstmn.io'
  selectedAPIs:
    - '/api/company/{companyName}/ports/orders put'
    - '/api/company/{companyName}/ports/orders get'
  baseSpec:
    content: >-
      data:application/x-yaml;base64,u�Zj�e�ƭ����욚Vڱ�openapi: 3.0.0
info:
  description: >-
    This document provides an API reference, grouped by function, describing how
    to use the Console Connect REST API.

    Products available through the Console Connect API include:

    * [Ports](#tag/Ports) - A port allows customers to access multiple on-demand
    Console Connect services, including access to cloud services, geographically
    separate networks (such as remote or branch offices) and the Internet, via a
    single network connection. 

    * [L2 Connections](#tag/L2-Connections) - Console Connect's point-to-point
    Layer 2 connection is a secured virtual private Ethernet service,
    transported via a fully redundant Multi-Protocol Label Switching (MPLS)
    enabled IP infrastructure provided by PCCW Global.

    * [Internet On-Demand (IO-D)](#tag/Internet-On-Demand-(IO-D)) - The IO-D
    service is carried on a fully redundant dual-stack global IP network,
    providing business-grade internet connectivity for enterprises and service
    providers.

    * [CloudRouter](#tag/CloudRouter) - CloudRouter is an MPLS VPN IP based
    infrastructure service which provides a private Layer 3 meshed network
    between multiple locations and network endpoints globally for enterprises
    and service providers.
  title: Console Connect API
  version: 1.0.0
  license:
    name: Commercial
    url: https://www.consoleconnect.com/terms-of-use
  termsOfService: https://www.consoleconnect.com/terms-of-use
  x-logo:
    url: >-
      https://storage.googleapis.com/console-connect-static-assets/cc-api-logo.jpg
    altText: Console Connect logo
  contact:
    name: Console Connect Support
    email: support@consoleconnect.com
servers:
  - url: https://api.consoleconnect.com
paths:
  /api/company/{companyName}/ports/orders:
    put:
      parameters:
        - description: Username of the data center facility.
          in: path
          example: supernetpa4
          name: companyName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - speed
                - portName
                - paymentType
              properties:
                paymentType:
                  type: string
                  description: paymentType is one of ‘plan’, ‘creditcard’ or ‘invoice’.
                billingId:
                  type: string
                  description: >-
                    The ID of the plan subscription. Only required when
                    paymentType is 'plan'.
                dataCenterFacility:
                  type: string
                  description: The username of the data center facility.
                speed:
                  type: string
                  description: The port speed in Mbps. Must be >= 100.
                portName:
                  type: string
                  description: The name of the port
                paymentTransactionId:
                  type: string
                durationUnit:
                  type: string
                  description: >-
                    durationUnit is 'm' (month)  or 'y' (year). Set to 'y' when
                    ordering a port with CrossConnect addon.
                bundleCrossConnect:
                  type: boolean
                  description: >-
                    Set to true when creating a port order with CrossConnect
                    addon. Please use CrossConnect enabled Data Center
                    Facilities to order a CrossConnect port.
            examples:
              Port:
                summary: Port
                value:
                  dataCenterFacility: supernetpa4
                  speed: '1000'
                  portName: PORT_2
                  paymentType: plan
                  paymentTransactionId: 56d691309a90128d55831db2
              Port-with-Cross-Connect:
                summary: Port with CrossConnect
                value:
                  dataCenterFacility: supernetpa4
                  speed: '1000'
                  portName: PORT_2
                  paymentType: plan
                  paymentTransactionId: 56d691309a90128d55831db2
                  durationUnit: 'y'
                  bundleCrossConnect: true
      responses:
        '200':
          content:
            application/json:
              examples:
                Port:
                  summary: Port
                  value:
                    billingId: 56d691309a90128d55831db2
                    cancelled: false
                    cancelledAt: '1970-01-01T00:00:00.000Z'
                    cancelledBy: null
                    company:
                      tags: []
                      __v: 0
                      avatar: null
                      avatarId: null
                      background: null
                      capabilities:
                        layer2: false
                        layer2Metros: []
                        layer2Regions: []
                        layer3: false
                        layer3Metros: []
                        layer3Regions: []
                      companies: []
                      company:
                        address: null
                        addresses: []
                        businessDevelopmentManagerTypePreference: UNSPECIFIED
                        businessRegistrationCertReference: null
                        businessRegistrationCertRejectedReason: null
                        businessRegistrationCertUploadedAt: null
                        businessRegistrationCertVerified: UNVERIFIED
                        businessType: null
                        city: null
                        clientId: null
                        companySize: null
                        dateFounded: null
                        emailDomains:
                          - example.org
                        fax: null
                        first: null
                        industry: null
                        isSDWAN: false
                        last: null
                        parentIds: []
                        phone: null
                        privacy:
                          community:
                            blackListIds: []
                            mode: PUBLIC
                            whiteListIds: []
                          network:
                            blackListIds: []
                            mode: PUBLIC
                            whiteListIds: []
                        regionalInternetRegistry: []
                        registeredName: null
                        state: null
                        website: null
                        zip: null
                      createdAt: '2017-02-06T23:20:46.291Z'
                      defaultPaymentType: null
                      deleted: false
                      deletedAt: null
                      displayOrder: -299
                      groups: []
                      headline: null
                      id: 58980a25a77b4d7bf459d200
                      isSupport: false
                      legalEntityId: null
                      linkUserCompany: {}
                      location: null
                      name: Company 1
                      online: false
                      optIntoMarketingEmail: false
                      overviewImage: null
                      phone: null
                      popIds: []
                      stats:
                        articles: 0
                        events: 0
                        followers: 0
                        following: 0
                        interconnections: 0
                        members: 1
                        posts: 0
                        privateArticles: 0
                        privateEvents: 0
                        privatePosts: 0
                      status: ACTIVE
                      summary: null
                      system:
                        welcomeMessage: null
                      type: COMPANY
                      updatedAt: '2017-02-06T23:20:46.291Z'
                      username: company1
                      verified: true
                      verifiedIdentity: true
                    controller:
                      asn: null
                      cerAsn: null
                      cerIp:
                        ipv4: null
                        ipv6: null
                      id: null
                      ip:
                        ipv4: null
                        ipv6: null
                      serviceLayerId: null
                      vlan: null
                    createdAt: '2016-03-02T07:07:28.195Z'
                    createdBy: stan
                    deleted: false
                    deletedAt: '1970-01-01T00:00:00.000Z'
                    deletedBy: null
                    id: 56d691309a90128d55831db1
                    locationId: null
                    crossConnectId: null
                    message: null
                    metro:
                      country: USA
                      createdAt: '2016-02-12T09:01:33.840Z'
                      deleted: false
                      deletedAt: null
                      id: 1232413986c08c061dd8c45f
                      name: SJC
                      updatedAt: '2016-02-12T09:01:33.840Z'
                    port:
                      activeChangedAt: '2016-03-02T07:07:27.147Z'
                      createdAt: '2016-03-02T07:07:27.148Z'
                      dataCenterFacilityId: 5126c9f1111e15a24a066130
                      deleted: false
                      deletedAt: '1970-01-01T00:00:00.000Z'
                      id: 56d6912f9a90128d55831da8
                      ip:
                        ipv4: null
                        ipv6: null
                      locationId: b3f5ac21-fec1-4418-9e1a-709d48da59fa
                      metroId: 1232413986c08c061dd8c45f
                      name: PORT_1
                      portId: null
                      speed: 1000
                      status: UNKNOWN
                      type: PHYSICAL_NSP
                      updatedAt: '2016-03-02T07:07:27.148Z'
                      vlan: null
                    portName: PORT_1
                    speed:
                      name: 1000 Mbps
                      value: 1000
                    status: created
                    updatedAt: '2016-03-02T07:07:28.195Z'
                    updatedBy: null
                Port-with-Cross-Connect:
                  summary: Port with CrossConnect
                  value:
                    billingId: 56d691309a90128d55831db2
                    cancelled: false
                    cancelledAt: '1970-01-01T00:00:00.000Z'
                    cancelledBy: null
                    company:
                      tags: []
                      __v: 0
                      avatar: null
                      avatarId: null
                      background: null
                      capabilities:
                        layer2: false
                        layer2Metros: []
                        layer2Regions: []
                        layer3: false
                        layer3Metros: []
                        layer3Regions: []
                      companies: []
                      company:
                        address: null
                        addresses: []
                        businessDevelopmentManagerTypePreference: UNSPECIFIED
                        businessRegistrationCertReference: null
                        businessRegistrationCertRejectedReason: null
                        businessRegistrationCertUploadedAt: null
                        businessRegistrationCertVerified: UNVERIFIED
                        businessType: null
                        city: null
                        clientId: null
                        companySize: null
                        dateFounded: null
                        emailDomains:
                          - example.org
                        fax: null
                        first: null
                        industry: null
                        isSDWAN: false
                        last: null
                        parentIds: []
                        phone: null
                        privacy:
                          community:
                            blackListIds: []
                            mode: PUBLIC
                            whiteListIds: []
                          network:
                            blackListIds: []
                            mode: PUBLIC
                            whiteListIds: []
                        regionalInternetRegistry: []
                        registeredName: null
                        state: null
                        website: null
                        zip: null
                      createdAt: '2017-02-06T23:20:46.291Z'
                      defaultPaymentType: null
                      deleted: false
                      deletedAt: null
                      displayOrder: -299
                      groups: []
                      headline: null
                      id: 58980a25a77b4d7bf459d200
                      isSupport: false
                      legalEntityId: null
                      linkUserCompany: {}
                      location: null
                      name: Company 1
                      online: false
                      optIntoMarketingEmail: false
                      overviewImage: null
                      phone: null
                      popIds: []
                      stats:
                        articles: 0
                        events: 0
                        followers: 0
                        following: 0
                        interconnections: 0
                        members: 1
                        posts: 0
                        privateArticles: 0
                        privateEvents: 0
                        privatePosts: 0
                      status: ACTIVE
                      summary: null
                      system:
                        welcomeMessage: null
                      type: COMPANY
                      updatedAt: '2017-02-06T23:20:46.291Z'
                      username: company1
                      verified: true
                      verifiedIdentity: true
                    controller:
                      asn: null
                      cerAsn: null
                      cerIp:
                        ipv4: null
                        ipv6: null
                      id: null
                      ip:
                        ipv4: null
                        ipv6: null
                      serviceLayerId: null
                      vlan: null
                    createdAt: '2016-03-02T07:07:28.195Z'
                    createdBy: stan
                    deleted: false
                    deletedAt: '1970-01-01T00:00:00.000Z'
                    deletedBy: null
                    id: 56d691309a90128d55831db1
                    locationId: null
                    crossConnectId: 68696464-b2f7-4c90-a342-293f7385469a
                    message: null
                    metro:
                      country: USA
                      createdAt: '2016-02-12T09:01:33.840Z'
                      deleted: false
                      deletedAt: null
                      id: 1232413986c08c061dd8c45f
                      name: SJC
                      updatedAt: '2016-02-12T09:01:33.840Z'
                    port:
                      activeChangedAt: '2016-03-02T07:07:27.147Z'
                      createdAt: '2016-03-02T07:07:27.148Z'
                      dataCenterFacilityId: 5126c9f1111e15a24a066130
                      deleted: false
                      deletedAt: '1970-01-01T00:00:00.000Z'
                      id: 56d6912f9a90128d55831da8
                      ip:
                        ipv4: null
                        ipv6: null
                      locationId: b3f5ac21-fec1-4418-9e1a-709d48da59fa
                      metroId: 1232413986c08c061dd8c45f
                      name: PORT_1
                      portId: null
                      speed: 1000
                      status: UNKNOWN
                      type: PHYSICAL_NSP
                      updatedAt: '2016-03-02T07:07:27.148Z'
                      vlan: null
                    portName: PORT_1
                    speed:
                      name: 1000 Mbps
                      value: 1000
                    status: created
                    updatedAt: '2016-03-02T07:07:28.195Z'
                    updatedBy: null
              schema:
                $ref: '#/components/schemas/Port_orderModel'
          description: OK
          headers: {}
        '400':
          description: Error
          content:
            application/json:
              examples:
                cannot-bundle-cross-connect:
                  summary: cannot bundle CrossConnect
                  value:
                    code: 400
                    message: Selected DCF does not support bundle cross connect
                bundle-cross-connect-charge-required:
                  summary: bundle CrossConnect charge required
                  value:
                    code: 400
                    message: >-
                      A bundleCrossConnectChargeId is required for a DCF which
                      supports bundled cross connect
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          headers: {}
      tags:
        - Ports
      description: >-
        A port order is created in a 'dataCenterFacility'.


        The 'paymentType' field is required and needs to be one of 'plan', or
        'invoice'. The 'creditcard' payment type is only supported via the
        Console Connect web application.


        When paymentType is 'plan' or 'invoice', 'paymentTransactionId' should
        not be provided. When paymentType is "creditcard", paymentTransactionId
        must be provided.


        When the port is provisioned, the order will change to "done" status and
        a new port will be created and activated.
      operationId: CreatePortOrder
      summary: Create a port order/reservation
  
    get:
      summary: Get Support Ticket by Id
      tags:
        - Support Tickets
      description: Get a single Support Ticket.
      parameters:
        - description: The id of the support ticket.
          in: path
          name: id
          required: true
          schema:
            type: string
          example: INC000001234567
      responses:
        '200':
          description: Returns a single support ticket.
          content:
            application/json:
              example:
                id: INC000001234567
                name: Ticket Name Label
                description: This is the description of the ticket
                priority:
                  - Low
                  - Medium
                  - High
                  - Critical
                status: Acknowledged
                ticketType: Incident
                creationDate: 2023-01-01T01:02:03.000+0000
                notes:
                  - id: category
                    text: Console Connect
                    '@type': faultsymptom
                  - id: item
                    text: Billing
                    '@type': faultsymptom
                  - id: type
                    text: Cloud
                    '@type': faultsymptom
                  - id: Email-Open Ticket
                    text: An example note for communication about the ticket
                    worklogId: WLG000012345678
                    '@type': worklog
                relatedParty:
                  - name: Contact Name
                    phone: '+123456789'
                    email: contact.name@emaildomain.com
                relatedEntity:
                  - name: AAA111
                    role: customerId
                    '@type': RelatedEntity
                    '@referredType': Profile
                channel:
                  name: Phone
                  '@type': Customer
                '@type': troubleTicket
        '400':
          description: Throws an error for an invalid ticket id.
          content:
            application/json:
              example:
                error:
                  statusCode: 404,
                  name: Error
                  message: 'Support Ticket: ticketId is not valid.'
        '401':
          description: Throws an error for an unauthorized request.
          content:
            application/json:
              example:
                error:
                  statusCode: 401,
                  name: Error
                  message: >-
                    Support Ticket: ticketId does not exist or Company:
                    companyId does not have permission to view it.
        '404':
          description: Throws an error for a support ticket that does not exist.
          content:
            application/json:
              example:
                error:
                  statusCode: 404,
                  name: Error
                  message: 'Support Ticket: ticketId does not exist.'
components:
  securitySchemes:
    api-key:
      description: >
        API Keys are provisioned by Support against your Console Connect User
        Account. Email [Support](mailto:support@consoleconnect.com) to request a
        key. 


        Here is an example request using an API Key:


        ```

        curl -X GET https://api.consoleconnect.com/api/company/exampleCo/ports \

        -H "Authorization: Bearer [[api key]]"

        ```
      type: http
      scheme: bearer
      bearerFormat: API key
  schemas:
    ErrorResponseSchema:
      properties:
        message:
          type: string
        status:
          type: integer
        statusCode:
          type: integer
    Port_orderModel:
      example:
        billingId: 56d691309a90128d55831db2
        cancelled: false
        cancelledAt: '1970-01-01T00:00:00.000Z'
        cancelledBy: null
        company:
          tags: []
          __v: 0
          avatar: null
          avatarId: null
          background: null
          capabilities:
            layer2: false
            layer2Metros: []
            layer2Regions: []
            layer3: false
            layer3Metros: []
            layer3Regions: []
          companies: []
          company:
            address: null
            addresses: []
            businessDevelopmentManagerTypePreference: UNSPECIFIED
            businessRegistrationCertReference: null
            businessRegistrationCertRejectedReason: null
            businessRegistrationCertUploadedAt: null
            businessRegistrationCertVerified: UNVERIFIED
            businessType: null
            city: null
            clientId: null
            companySize: null
            dateFounded: null
            emailDomains:
              - example.org
            fax: null
            first: null
            industry: null
            isSDWAN: false
            last: null
            parentIds: []
            phone: null
            privacy:
              community:
                blackListIds: []
                mode: PUBLIC
                whiteListIds: []
              network:
                blackListIds: []
                mode: PUBLIC
                whiteListIds: []
            regionalInternetRegistry: []
            registeredName: null
            state: null
            website: null
            zip: null
          createdAt: '2017-02-06T23:20:46.291Z'
          defaultPaymentType: null
          deleted: false
          deletedAt: null
          displayOrder: -299
          groups: []
          headline: null
          id: 58980a25a77b4d7bf459d200
          isSupport: false
          legalEntityId: null
          linkUserCompany: {}
          location: null
          name: Company 1
          online: false
          optIntoMarketingEmail: false
          overviewImage: null
          phone: null
          popIds: []
          stats:
            articles: 0
            events: 0
            followers: 0
            following: 0
            interconnections: 0
            members: 1
            posts: 0
            privateArticles: 0
            privateEvents: 0
            privatePosts: 0
          status: ACTIVE
          summary: null
          system:
            welcomeMessage: null
          type: COMPANY
          updatedAt: '2017-02-06T23:20:46.291Z'
          username: company1
          verified: true
          verifiedIdentity: true
        controller:
          asn: null
          cerAsn: null
          cerIp:
            ipv4: null
            ipv6: null
          id: null
          ip:
            ipv4: null
            ipv6: null
          serviceLayerId: null
          vlan: null
        createdAt: '2016-03-02T07:07:28.195Z'
        createdBy: stan
        deleted: false
        deletedAt: '1970-01-01T00:00:00.000Z'
        deletedBy: null
        id: 56d691309a90128d55831db1
        locationId: null
        message: null
        metro:
          country: USA
          createdAt: '2016-02-12T09:01:33.840Z'
          deleted: false
          deletedAt: null
          id: 1232413986c08c061dd8c45f
          name: SJC
          updatedAt: '2016-02-12T09:01:33.840Z'
        port:
          activeChangedAt: '2016-03-02T07:07:27.147Z'
          createdAt: '2016-03-02T07:07:27.148Z'
          dataCenterFacilityId: 5126c9f1111e15a24a066130
          deleted: false
          deletedAt: '1970-01-01T00:00:00.000Z'
          id: 56d6912f9a90128d55831da8
          ip:
            ipv4: null
            ipv6: null
          locationId: b3f5ac21-fec1-4418-9e1a-709d48da59fa
          metroId: 1232413986c08c061dd8c45f
          name: PORT_1
          portId: null
          speed: 1000
          status: UNKNOWN
          type: PHYSICAL_NSP
          updatedAt: '2016-03-02T07:07:27.148Z'
          vlan: null
        portName: PORT_1
        speed:
          name: 1000 Mbps
          value: 1000
        status: created
        updatedAt: '2016-03-02T07:07:28.195Z'
        updatedBy: null
      properties:
        billingId:
          type: string
        cancelled:
          type: boolean
        cancelledAt:
          type: string
        cancelledBy:
          type: string
          nullable: true
        company:
          properties:
            tags:
              items: {}
              type: array
            __v:
              type: number
            avatar:
              type: string
              nullable: true
            avatarId:
              type: string
              nullable: true
            background:
              type: string
              nullable: true
            capabilities:
              properties:
                layer2:
                  type: boolean
                layer2Metros:
                  items: {}
                  type: array
                layer2Regions:
                  items: {}
                  type: array
                layer3:
                  type: boolean
                layer3Metros:
                  items: {}
                  type: array
                layer3Regions:
                  items: {}
                  type: array
              type: object
            companies:
              items: {}
              type: array
            company:
              properties:
                address:
                  type: string
                  nullable: true
                addresses:
                  items: {}
                  type: array
                businessDevelopmentManagerTypePreference:
                  type: string
                businessRegistrationCertReference:
                  type: string
                  nullable: true
                businessRegistrationCertRejectedReason:
                  type: string
                  nullable: true
                businessRegistrationCertUploadedAt:
                  type: string
                  nullable: true
                businessRegistrationCertVerified:
                  type: string
                businessType:
                  type: string
                  nullable: true
                city:
                  type: string
                  nullable: true
                clientId:
                  type: string
                  nullable: true
                companySize:
                  type: string
                  nullable: true
                dateFounded:
                  type: string
                  nullable: true
                emailDomains:
                  items:
                    type: string
                  type: array
                fax:
                  type: string
                  nullable: true
                first:
                  type: string
                  nullable: true
                industry:
                  type: string
                  nullable: true
                isSDWAN:
                  type: boolean
                last:
                  type: string
                  nullable: true
                parentIds:
                  items: {}
                  type: array
                phone:
                  type: string
                  nullable: true
                privacy:
                  properties:
                    community:
                      properties:
                        blackListIds:
                          items: {}
                          type: array
                        mode:
                          type: string
                        whiteListIds:
                          items: {}
                          type: array
                      type: object
                    network:
                      properties:
                        blackListIds:
                          items: {}
                          type: array
                        mode:
                          type: string
                        whiteListIds:
                          items: {}
                          type: array
                      type: object
                  type: object
                regionalInternetRegistry:
                  items: {}
                  type: array
                registeredName:
                  type: string
                  nullable: true
                state:
                  type: string
                  nullable: true
                website:
                  type: string
                  nullable: true
                zip:
                  type: string
                  nullable: true
              type: object
            createdAt:
              type: string
            defaultPaymentType:
              type: string
              nullable: true
            deleted:
              type: boolean
            deletedAt:
              type: string
              nullable: true
            displayOrder:
              type: number
            groups:
              items: {}
              type: array
            headline:
              type: string
              nullable: true
            id:
              type: string
            isSupport:
              type: boolean
            legalEntityId:
              type: string
              nullable: true
            linkUserCompany:
              properties: {}
              type: object
            location:
              type: string
              nullable: true
            name:
              type: string
            online:
              type: boolean
            optIntoMarketingEmail:
              type: boolean
            overviewImage:
              type: string
              nullable: true
            phone:
              type: string
              nullable: true
            popIds:
              items: {}
              type: array
            stats:
              properties:
                articles:
                  type: number
                events:
                  type: number
                followers:
                  type: number
                following:
                  type: number
                interconnections:
                  type: number
                members:
                  type: number
                posts:
                  type: number
                privateArticles:
                  type: number
                privateEvents:
                  type: number
                privatePosts:
                  type: number
              type: object
            status:
              type: string
            summary:
              type: string
              nullable: true
            system:
              properties:
                welcomeMessage:
                  type: string
                  nullable: true
              type: object
            type:
              type: string
            updatedAt:
              type: string
            username:
              type: string
            verified:
              type: boolean
            verifiedIdentity:
              type: boolean
          type: object
        controller:
          properties:
            asn:
              type: number
              nullable: true
            cerAsn:
              type: number
              nullable: true
            cerIp:
              properties:
                ipv4:
                  type: number
                  nullable: true
                ipv6:
                  type: number
                  nullable: true
              type: object
            id:
              type: string
              nullable: true
            ip:
              properties:
                ipv4:
                  type: number
                  nullable: true
                ipv6:
                  type: number
                  nullable: true
              type: object
            serviceLayerId:
              type: string
              nullable: true
            vlan:
              type: number
              nullable: true
          type: object
        createdAt:
          type: string
        createdBy:
          type: string
        deleted:
          type: boolean
        deletedAt:
          type: string
        deletedBy:
          type: string
          nullable: true
        id:
          type: string
        locationId:
          type: string
          nullable: true
        crossConnectId:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        metro:
          properties:
            country:
              type: string
            createdAt:
              type: string
            deleted:
              type: boolean
            deletedAt:
              type: string
              nullable: true
            id:
              type: string
            name:
              type: string
            updatedAt:
              type: string
          type: object
        port:
          properties:
            activeChangedAt:
              type: string
            createdAt:
              type: string
            dataCenterFacilityId:
              type: string
            deleted:
              type: boolean
            deletedAt:
              type: string
            id:
              type: string
            ip:
              properties:
                ipv4:
                  type: number
                  nullable: true
                ipv6:
                  type: number
                  nullable: true
              type: object
            locationId:
              type: string
            metroId:
              type: string
            name:
              type: string
            portId:
              type: string
              nullable: true
            speed:
              type: number
            status:
              type: string
            type:
              type: string
            updatedAt:
              type: string
            vlan:
              type: number
              nullable: true
          type: object
        portName:
          type: string
        speed:
          properties:
            name:
              type: string
            value:
              type: number
          type: object
        status:
          type: string
        updatedAt:
          type: string
        updatedBy:
          type: string
          nullable: true
      type: object
security:
  - api-key: []
tags:
  - name: Ports
    description: >-
      Before configuring any network services in Console Connect, you must
      create a port. This is a two-step process; ordering or requesting a port,
      then activating that port.

      Console Connect manages entitlements through plan-based subscriptions
      associated with each port (one subscription per port). Before you can
      order a port, your company must have a subscription to a plan with
      sufficient entitlements available to complete the request. To list your
      company’s subscriptions and entitlements refer to [Get all plans and
      entitlements](#network-ports-all-plans-&-entitlements-get).
links: []
