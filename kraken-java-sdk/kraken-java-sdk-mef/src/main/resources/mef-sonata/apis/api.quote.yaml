---
kind: kraken.component.api
apiVersion: v1
metadata:
  key: mef.sonata.api.quote
  name: Quote Management
  labels:
    mef-api-release: grace
    parentProductType: access.eline
    quote-api-version: v8
  version: 8
spec:
  supportedProductTypesAndActions:
    - path: /mefApi/sonata/quoteManagement/v8/quote
      method: post
      actionTypes:
        - add
        - modify
<<<<<<< Updated upstream
      supportedConfig: $.quote
=======
      productTypes:
        - UNI
        - ACCESS_E_LINE
        - INTERNET_ACCESS
>>>>>>> Stashed changes
    - path: /mefApi/sonata/quoteManagement/v8/quote/{id}
      method: get
      supportedConfig: $.quote
  mappings:
    - uri: ${env.target.url}
      trigger:
        path: /mefApi/sonata/quoteManagement/v8/quote
        method: post
      metadata:
        cacheRequestBody: true
      actions:
        - id: calculate_quote_type_and_action_via_javascript
          actionType: engine@javascript
          env:
            quoteItem: ${body['quoteItem'][0]}
            instantSyncQuote: ${body.instantSyncQuote}
          with:
            code: |
              (jsonStr) => {
                 console.log("input: " + jsonStr);
                 let input = JSON.parse(jsonStr);
                 let errorCode = '';
                 let errorMsg = '';
                 let errorArr = [''];
                 let targetAPIConfigKey = '';
                 let matrixConfigKey = '';
                 let forwardDownstream = true;
                 let typeArr = ['UNI', 'ACCESS_E_LINE'];
                 let action = input.quoteItem?.action;
                 let syncQuote = input.instantSyncQuote;
                 let productConfiguration = input.quoteItem?.product?.productConfiguration;
                 let typeVal = productConfiguration?.['@type'];
                 if(typeVal === 'UNI') {
                   if(syncQuote === true) {
                     if (action === 'add') {
                       targetAPIConfigKey = 'mef.sonata.api-target.quote.uni.add.sync';
                       matrixConfigKey = 'mef.sonata.api.matrix.quote.uni.add.sync';
                     } else if (action === 'modify') {
                       targetAPIConfigKey = 'mef.sonata.api-target.quote.uni.modify.sync';
                       matrixConfigKey = 'mef.sonata.api.matrix.quote.uni.modify.sync';
                     } else {
                       errorArr = ['api use case is not supported : missing property : quoteItem[0].action'];
                       errorCode = '400';
                     }
                   } else if (syncQuote === false) {
                     targetAPIConfigKey = 'mef.sonata.api-target.quote.uni.add';
                     matrixConfigKey = 'mef.sonata.api.matrix.quote.uni.add';
                     errorArr = ['api use case is not supported : disabled : @{{instantSyncQuote}}==false'];
                     errorCode = '422';
                   } else {
                     errorArr = ['api use case is not supported : missing property : instantSyncQuote'];
                     errorCode = '400';
                   }
                 } else if(typeVal === 'ACCESS_E_LINE') {
                   if(syncQuote === true) {
                     if (action === 'add') {
                       targetAPIConfigKey = 'mef.sonata.api-target.quote.eline.add.sync';
                       matrixConfigKey = 'mef.sonata.api.matrix.quote.eline.add.sync';
                     } else if (action === 'modify') {
                       targetAPIConfigKey = 'mef.sonata.api-target.quote.eline.modify.sync';
                       matrixConfigKey = 'mef.sonata.api.matrix.quote.eline.modify.sync';
                     } else {
                       errorArr = ['api use case is not supported : missing property : quoteItem[0].action'];
                       errorCode = '422';
                     }
                   } else if (syncQuote === false) {
                     targetAPIConfigKey = 'mef.sonata.api-target.quote.eline.add';
                     matrixConfigKey = 'mef.sonata.api.matrix.quote.eline.add';
                     errorArr = ['api use case is not supported : disabled : @{{instantSyncQuote}}==false'];
                     errorCode = '422';
                   } else {
                     errorArr = ['api use case is not supported : missing property : instantSyncQuote'];
                     errorCode = '400';
                   }
                 } else {
                   errorArr = ['api use case is not supported :'];
                   if (!typeArr.includes(typeVal) && syncQuote === true){
                     if (typeVal === undefined) {
                       errorCode = '400';
                       errorArr.push(`expect quoteItem[0].product.productConfiguration.@type in [ ${typeArr} ], but missing property.`);
                     } else {
                       errorCode = '422';
                       errorArr.push(`expect @{{quoteItem[0].product.productConfiguration.@type}} in [ ${typeArr} ], but ${typeVal}.`);
                     }
                   } else if (!typeArr.includes(typeVal) && syncQuote === false) {
                     if (typeVal === undefined) {
                       errorCode = '400';
                       errorArr.push(`expect quoteItem[0].product.productConfiguration.@type in [ ${typeArr} ], but missing property.`);
                       errorArr.push('disabled : instantSyncQuote==false');
                     } else {
                       errorCode = '422';
                       errorArr.push(`expect @{{quoteItem[0].product.productConfiguration.@type}} in [ ${typeArr} ], but ${typeVal}.`);
                       errorArr.push('disabled : @{{instantSyncQuote}}==false');
                     }
                   } else {
                      if (typeVal === undefined || syncQuote === undefined) {
                       errorCode = '400';
                       errorArr.push(`expect quoteItem[0].product.productConfiguration.@type in [ ${typeArr} ], instantSyncQuote, but missing property.`);
                     } else {
                       errorCode = '400';
                       errorArr.push(`expect quoteItem[0].product.productConfiguration.@type in [ ${typeArr} ], but ${typeVal}.`);
                       errorArr.push('missing property : instantSyncQuote');
                     }
                   }
                   targetAPIConfigKey = 'targetKey:notFound';
                 }
                 errorMsg = errorArr.join(' ');
                 let ret = {
                   productType: typeVal || 'undefined',
                   instantSyncQuote: syncQuote !== undefined ? syncQuote : 'undefined',
                   forwardDownstream: forwardDownstream,
                   targetAPIConfigKey: targetAPIConfigKey,
                   matrixConfigKey: matrixConfigKey,
                   errorMsg: errorMsg,
                   errorCode: errorCode,
                   routeParams: {
                      type: typeVal,
                      action: action,
                      syncQuote: syncQuote
                   }
                 };
                 return JSON.stringify(ret);
               }
          outputKey: quote

        - id: mapping_matrix_check_quote
          actionType: buildin@mapping-matrix-checker
          env:
            mappingMatrixKey: ${quote.matrixConfigKey}
            targetKey: ${quote.targetAPIConfigKey}
            routeParams: ${quote.routeParams}
        - id: persist_http_request
          actionType: buildin@db
          env:
            bizType: ${quote.productType}
          with:
            action: create
            properties:
              - headers
              - queryParameters
              - requestBody
          preRequest: true

        - id: load-downstream-api-config
          actionType: buildin@load-target-api-config
          env:
            configKey: ${quote.targetAPIConfigKey}
            mefQuery: ${query}
            mefRequestBody: ${body}
            entity: ${entity}
          with:
            render: true
          outputKey: targetApiConfig

        - id: rewrite-path
          actionType: buildin@rewrite-path
          env:
            path: ${targetApiConfig.endpoints[0].path}
            method: ${targetApiConfig.endpoints[0].method}

        - id: modify-request-body-for-quote-add
          actionType: buildin@modify-request-body
          env:
            code: ${targetApiConfig.endpoints[0].requestBody}

        - id: modify-response-body-for-quote-add
          actionType: buildin@modify-response-body
          with:
            engine: spel
            successStatus: 201
          env:
            code: ${targetApiConfig.endpoints[0].responseBody}
            inputs: ${targetApiConfig.inputs}
            mefRequestBody: ${body}
          postResultRender: true

        - actionType: buildin@db
          with:
            action: update
            properties:
              - responseBody
              - responseStatusCode
              - renderedResponseBody
          preRequest: false
          postRequest: true
          order: -4

    - uri: ${env.target.url}
      trigger:
        path: /mefApi/sonata/quoteManagement/v8/quote/**
        method: get
      metadata:
        cacheRequestBody: false
      actions:
        - name: retrieve quoteId from path
          actionType: buildin@pattern
          env:
            input: ${path}
            pattern: /mefApi/sonata/quoteManagement/v8/quote/(?<segment>.*)

        - id: read request payload by id
          actionType: buildin@db
          env:
            id: ${segment}
            blankIdErrMsg: "quote id cannot be blank"
            notExistedErrMsg: "quote id does not exist"
          with:
            action: read
          preRequest: true

        - id: calculate_quote_type_for_read_via_javascript
          actionType: engine@javascript
          env:
            bizType: ${entity.bizType}
            instantSyncQuote: ${entity.request.instantSyncQuote}
          with:
            code: |
              (jsonStr) => {
                console.log("input: " + jsonStr);
                let input = JSON.parse(jsonStr);
                let errorMsg = '';
                let errorArr = [''];
                let targetAPIConfigKey = '';
                let forwardDownstream = true;
                let typeArr = ['UNI', 'ACCESS_E_LINE'];
                let syncQuote = input.instantSyncQuote;
                if(input.bizType == 'UNI') {
                  if(syncQuote === true) {
                    targetAPIConfigKey = 'mef.sonata.api-target.quote.uni.read.sync';
                    forwardDownstream = false;
                  } else {
                    targetAPIConfigKey = 'mef.sonata.api-target.quote.uni.read';
                    errorArr = ['api use case is not supported : disabled : @{{instantSyncQuote}}==false'];
                  }
                } else if(input.bizType == 'ACCESS_E_LINE') {
                  if(syncQuote === true) {
                    targetAPIConfigKey = 'mef.sonata.api-target.quote.eline.read.sync';
                    forwardDownstream = false;
                  } else {
                    targetAPIConfigKey = 'mef.sonata.api-target.quote.eline.read';
                    errorArr = ['api use case is not supported : disabled : @{{instantSyncQuote}}==false'];
                  }
                } else {
                  targetAPIConfigKey = 'targetKey:notFound';
                  errorArr = ['api use case is not supported :'];
                  if (!typeArr.includes(typeVal)){
                    errorArr.push(`expect @{{quoteItem[0].product.productConfiguration.@type}} in [ ${typeArr} ], but ${typeVal}.`);
                  }
                  if (!syncQuote) {
                    errorArr.push('disabled : @{{instantSyncQuote}}==false');
                  }
                }
                errorMsg = errorArr.join(' ');
                let ret = {
                  productType: input.bizType,
                  instantSyncQuote: input.instantSyncQuote,
                  forwardDownstream: forwardDownstream,
                  targetAPIConfigKey: targetAPIConfigKey,
                  errorMsg: errorMsg
                };
                return JSON.stringify(ret);
              }
          outputKey: quote
        - id: load-downstream-api-config-quote-read
          actionType: buildin@load-target-api-config
          env:
            configKey: ${quote.targetAPIConfigKey}
            mefQuery: ${query}
            entity: ${entity}
          with:
            render: true
          outputKey: targetApiConfig

        - id: rewrite-path
          actionType: buildin@rewrite-path
          env:
            path: ${targetApiConfig.endpoints[0].path}
            method: ${targetApiConfig.endpoints[0].method}

        - id: mock-response
          actionType: buildin@mock-response
          env:
            forwardDownstream: ${quote.forwardDownstream}

        - id: modify-request-body
          actionType: buildin@modify-request-body
          env:
            code: ${targetApiConfig.endpoints[0].requestBody}

        - id: modify-response-body
          actionType: buildin@modify-response-body
          with:
            engine: spel
          env:
            code: ${targetApiConfig.endpoints[0].responseBody}
            inputs: ${targetApiConfig.inputs}
links:
  - targetAssetKey: mef.sonata.api-target.quote.eline.add
    relationship: implementation.target
    group: mef.sonata.api-target.quote.eline.add
  - targetAssetKey: mef.sonata.api-target.quote.eline.modify.sync
    relationship: implementation.target
    group: mef.sonata.api-target.quote.eline.modify.sync
  - targetAssetKey: mef.sonata.api-target.quote.eline.read
    relationship: implementation.target
    group: mef.sonata.api-target.quote.eline.read
  - targetAssetKey: mef.sonata.api-target.quote.uni.add
    relationship: implementation.target
    group: mef.sonata.api-target.quote.uni.add
  - targetAssetKey: mef.sonata.api-target.quote.uni.read
    relationship: implementation.target
    group: mef.sonata.api-target.quote.uni.read
  - targetAssetKey: mef.sonata.api-target.quote.eline.add.sync
    relationship: implementation.target
    group:  mef.sonata.api-target.quote.eline.add.sync
  - targetAssetKey: mef.sonata.api-target.quote.eline.read.sync
    relationship: implementation.target
    group: mef.sonata.api-target.quote.eline.read.sync
  - targetAssetKey: mef.sonata.api-target.quote.uni.add.sync
    relationship: implementation.target
    group: mef.sonata.api-target.quote.uni.add.sync
  - targetAssetKey: mef.sonata.api-target.quote.uni.read.sync
    relationship: implementation.target
    group: mef.sonata.api-target.quote.uni.read.sync
  - targetAssetKey: mef.sonata.api-spec.quote
    relationship: implementation.standard.api-spec
  - targetAssetKey: mef.sonata.api-target-mapper.quote.eline.add
    relationship: implementation.target-mapper
    group: mef.sonata.api-target.quote.eline.add
  - targetAssetKey: mef.sonata.api-target-mapper.quote.eline.modify.sync
    relationship: implementation.target-mapper
    group: mef.sonata.api-target.quote.eline.modify.sync
  - targetAssetKey: mef.sonata.api.matrix.quote.eline.add
    relationship: implementation.matrix
    group: mef.sonata.api-target.quote.eline.add
  - targetAssetKey: mef.sonata.api.matrix.quote.eline.modify.sync
    relationship: implementation.matrix
    group: mef.sonata.api-target.quote.eline.modify.sync
  - targetAssetKey: mef.sonata.api-target-mapper.quote.uni.add
    relationship: implementation.target-mapper
    group: mef.sonata.api-target.quote.uni.add
  - targetAssetKey: mef.sonata.api.matrix.quote.uni.add
    relationship: implementation.matrix
    group: mef.sonata.api-target.quote.uni.add
  - targetAssetKey: mef.sonata.api-target-mapper.quote.uni.read
    relationship: implementation.target-mapper
    group: mef.sonata.api-target.quote.uni.read
  - targetAssetKey: mef.sonata.api-target-mapper.quote.eline.read
    relationship: implementation.target-mapper
    group: mef.sonata.api-target.quote.eline.read
  - targetAssetKey: mef.sonata.api-target-mapper.quote.eline.add.sync
    relationship: implementation.target-mapper
    group: mef.sonata.api-target.quote.eline.add.sync
  - targetAssetKey: mef.sonata.api.matrix.quote.eline.add.sync
    relationship: implementation.matrix
    group: mef.sonata.api-target.quote.eline.add.sync
  - targetAssetKey: mef.sonata.api-target-mapper.quote.uni.add.sync
    relationship: implementation.target-mapper
    group: mef.sonata.api-target.quote.uni.add.sync
  - targetAssetKey: mef.sonata.api.matrix.quote.uni.add.sync
    relationship: implementation.matrix
    group: mef.sonata.api-target.quote.uni.add.sync
  - targetAssetKey: mef.sonata.api-target-mapper.quote.uni.read.sync
    relationship: implementation.target-mapper
    group: mef.sonata.api-target.quote.uni.read.sync
  - targetAssetKey: mef.sonata.api-target-mapper.quote.eline.read.sync
    relationship: implementation.target-mapper
    group: mef.sonata.api-target.quote.eline.read.sync