{
  "code": 200,
  "message": "OK",
  "data": {
    "kind": "kraken.product.release.download",
    "apiVersion": "v1",
    "metadata": {
      "id": "5cdd7365-e54d-4e01-a034-29fffaeef9da",
      "name": "V1.1.0.download",
      "version": 0,
      "key": "mef.sonata.release@1.1.0.download",
      "labels": {
        "releaseId": "64fadc1d-5711-45b4-8e07-c10a55e42299",
        "releaseKey": "mef.sonata.release@1.1.0"
      }
    },
    "facets": {
      "contentMap": {
        "memory:console-core/mef-lso-sonata-api/template-upgrade/release.1.2.1.yaml": "---\nkind: kraken.product.template-upgrade\napiVersion: v1\nmetadata:\n  key: kraken.product.template-upgrade.1.2.1\n  name: V1.2.1\n  labels:\n    release-version: V1.2.1\n    release-date: 2024-09-03\n  description: |\n    fix issues:\n      upgrade quote sync add target mapper file\n    new feature:\n\n  version: 1\n",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.inventory.eline.read.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.inventory.eline.read\n  mapperKey: mef.sonata.api-target-mapper.inventory.eline.read\n  name: Product Inventory eline\n  version: 7\nspec:\n  inputs:\n    - mefQuery\n  trigger:\n    path: /mefApi/sonata/productInventory/v7/product/{id}\n    method: get\n    productType: access_e_line\n  endpoints:\n    - id: Retrieves a product by ID\n      path: \"\"\n      method: \"\"\n      responseBody: |\n        { \n          \"id\":\"${segment}\",\n          \"startDate\":\"@{{startDate}}\",\n           \"status\":\"@{{status}}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.quote.uni.add.sync.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.quote.uni.add.sync\n  name: Quote Management API\n  mapperKey: mef.sonata.api-target-mapper.quote.uni.add.sync\n  version: 3\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n  trigger:\n    path: /mefApi/sonata/quoteManagement/v8/quote\n    method: post\n    productType: uni\n    actionType: add\n  endpoints:\n    - id: create quote for port\n      path:\n      method:\n      requestBody: ${mefRequestBody.quoteItem[0].product.productConfiguration.uni}\n      responseBody: |\n        {\n          \"id\":\"${entity.id}\",\n          \"buyerRequestedQuoteLevel\":\"${mefRequestBody.buyerRequestedQuoteLevel}\",\n          \"relatedContactInformation\":\"${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation(env.seller.role, env.seller.name, env.seller.emailAddress, env.seller.number, mefRequestBody.relatedContactInformation)}\",\n          \"quoteItem\":[\n            {\n              \"product\":\"${mefRequestBody.quoteItem[0].product}\",\n              \"action\":\"add\",\n              \"id\":\"${mefRequestBody.quoteItem[0].id}\",\n              \"state\":\"((mefResponseBody.quoteItem[0].quoteItemPrice[0].price.dutyFreeAmount.value == '' ? 'unableToProvide': 'approved.orderable'))\",\n              \"quoteItemPrice\":[{\n                \"unitOfMeasure\":\"@{{quoteItem.quoteItemPrice.unitOfMeasure}}\",\n                \"price\":{\n                  \"dutyFreeAmount\":{\n                     \"unit\":\"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.unit}}\",\n                     \"value\":\"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.value}}\"\n                  },\n                  \"taxRate\":\"@{{}}\",\n                  \"taxIncludedAmount\":{\n                    \"unit\":\"@{{quoteItem.quoteItemPrice.price.taxIncludedAmount.unit}}\",\n                    \"value\":\"@{{quoteItem.quoteItemPrice.price.taxIncludedAmount.value}}\"\n                  }\n                },\n                \"name\":\"@{{quoteItem.quoteItemPrice.name}}\",\n                \"priceType\":\"@{{quoteItem.quoteItemPrice.priceType}}\",\n                \"description\":\"@{{quoteItem.quoteItemPrice.description}}\",\n                \"recurringChargePeriod\":\"@{{quoteItem.quoteItemPrice.recurringChargePeriod}}\"\n              }]\n            }\n          ],\n          \"quoteDate\":\"${T(com.consoleconnect.kraken.operator.core.toolkit.DateTime).nowInUTCFormatted()}\",\n          \"externalId\":\"${mefRequestBody[externalId]?:''}\",\n          \"instantSyncQuote\":\"${mefRequestBody[instantSyncQuote]?:''}\",\n          \"requestedQuoteCompletionDate\":\"${mefRequestBody[requestedQuoteCompletionDate]?:''}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.quote.uni.read.sync.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.quote.uni.read.sync\n  name: Mapper Of Reading Quote UNI\n  description: This operation retrieves a Quote entity. Attribute selection is enabled for all first level attributes.\n  version: 1\nspec:\n  trigger:\n    path: /mefApi/sonata/quoteManagement/v8/quote/{id}\n    method: get\n    productType: uni\n    quoteLevel: firm\n    syncMode: true\n  endpoints:\n    - id: retrieve quote for port\n      path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n        response:",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.product.offering.eline.add.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.poq.eline.add\n  name: Product Offering Qualification (POQ) API\n  description: | \n    A request initiated by the Buyer to determine whether the Seller is\n    able to deliver a product or set of products from among their product\n    offerings, at the Buyer's location(s); or modify a previously purchased\n    product. The Seller also provides estimated time intervals to complete\n    these deliveries. Reference: MEF 79 (Sn 8.4).\nspec:\n  trigger:\n    path: /mefApi/sonata/productOfferingQualification/v7/productOfferingQualification\n    method: post\n    productType: access_e_line\n    actionType: add\n  endpoints:\n    - id: create a product offering qualification for connection\n      path: \"\"\n      method: \"\"\n      mappers:\n        request:\n        response:\n          - name: mapper.poq.eline.add.itemState\n            title: POQ Item State Mapping\n            description: POQ Item state mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{itemState}}\"\n            targetType: enum\n            targetLocation: BODY\n            targetValues:\n              - acknowledged\n              - done.ready\n              - done.abandoned\n              - terminatedWithError\n              - approved.orderableAlternate\n              - inProgress\n            valueMapping: {}\n            defaultValue: \"done.ready\"\n            requiredMapping: false\n          - name: mapper.poq.eline.add.state\n            title: POQ State Mapping\n            description: POQ state mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{state}}\"\n            targetType: enum\n            targetLocation: BODY\n            targetValues:\n              - acknowledged\n              - done.ready\n              - done.unableToProvide\n              - terminatedWithError\n              - approved.orderableAlternate\n              - inProgress\n            valueMapping: {}\n            defaultValue: \"done.ready\"\n            requiredMapping: false",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.inventory.uni.list.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.inventory.uni.list\n  name: Inventory Connection API\n  version: 2\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n  trigger:\n    path: /mefApi/sonata/productInventory/v7/product\n    method: get\n    productType: uni\n  endpoints:\n    - id: list uni product\n      path: \"\"\n      method: \"\"\n      mappers:\n        request:\n          - name: mapper.inventory.uni.list.buyerId\n            title: \"The unique identifier of the organization that is acting as the a Buyer. MUST be specified in the request only when the requester represents more than one Buyer.\"\n            source: \"@{{buyerId}}\"\n            sourceLocation: \"QUERY\"\n            target: \"\"\n            targetLocation: \"\"\n            requiredMapping: false\n        response:\n          - name: mapper.inventory.uni.list.id\n            title: \"Unique identifier of the product\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{id}}\"\n            targetType: string\n            targetLocation: BODY\n            requiredMapping: true\n            checkPath: \"$[0].id\"\n            deletePath: \"$[*]\"\n          - name:  mapper.inventory.uni.list.startDate\n            title: \"The date from which the product starts\"\n            description: \"BODY\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{startDate}}\"\n            targetType: string\n            targetLocation: BODY\n            requiredMapping: true\n          - name: mapper.inventory.uni.list.status\n            title: \"Possible values for the status of a MEF product\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{[*].status}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: true\n            targetValues:\n              - active\n              - active.pendingChange\n              - cancelled\n              - pendingActive\n              - pendingTerminate\n              - suspended\n              - suspendedPendingTerminate\n              - terminated\n            valueMappings: {}\n",
        "memory:console-core/mef-lso-sonata-api/template-upgrade/release.1.2.2.yaml": "---\nkind: kraken.product.template-upgrade\napiVersion: v1\nmetadata:\n  key: kraken.product.template-upgrade.1.2.2\n  name: V1.2.2\n  labels:\n    release-version: V1.2.2\n    release-date: 2024-09-03\n  description: |\n    fix issues:\n      added target location in mef.sonata.api-target-mapper.quote.eline.add.sync\n      for target item @{{quoteItem.quoteItemPrice.price.dutyFreeAmount.value}}\n    new feature:\n\n  version: 1\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.quote.eline.read.sync.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.quote.eline.read.sync\n  name: Mapper Of Reading Quote Eline\n  description: This operation retrieves a Quote entity. Attribute selection is enabled for all first level attributes.\n  version: 1\nspec:\n  trigger:\n    path: /mefApi/sonata/quoteManagement/v8/quote/{id}\n    method: get\n    productType: access_e_line\n    quoteLevel: firm\n    syncMode: true\n  endpoints:\n    - id: retrieve quote for connection\n      path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n        response:",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.order.eline.read.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.order.eline.read\n  name: Order Connection API\n  mapperKey: mef.sonata.api-target-mapper.order.eline.read\n  version: 6\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n  trigger:\n    path: /mefApi/sonata/productOrderingManagement/v10/productOrder/{id}\n    method: get\n    productType: access_e_line\n  endpoints:\n    - id: retrieve connection detail by id\n      path: \"\"\n      pathReferId: \"mef.sonata.api-target-mapper.order.eline.add#mapper.order.eline.add.orderId\"\n      method: \"\"\n      responseBody: |\n        {\n          \"id\":\"${entity.id}\",\n          \"relatedContactInformation\":\"${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation(env.seller.role, env.seller.name, env.seller.emailAddress, env.seller.number, entity.request.relatedContactInformation)}\",\n          \"productOrderItem\":\"${entity.request.productOrderItem}\",\n          \"orderDate\":\"${entity.renderedResponse.orderDate}\",\n          \"state\":\"@{{state}}\",\n          \"orderId\":\"${entity.renderedResponse.orderId}\",\n          \"instanceId\":\"@{{instanceId}}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.order.eline.add.yaml": "\n---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.order.eline.add\n  name: Order Connection API\n  mapperKey: mef.sonata.api-target-mapper.order.eline.add\n  version: 7\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n  trigger:\n    path: /mefApi/sonata/productOrderingManagement/v10/productOrder\n    method: post\n    productType: access_e_line\n    actionType: add\n  endpoints:\n    - id: create connection order\n      path: \"\"\n      method: \"\"\n      requestBody: \"${mefRequestBody.productOrderItem[0].product.productConfiguration.access_e_line}\"\n      responseBody: |\n        {\n          \"relatedContactInformation\":\"${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation(env.seller.role, env.seller.name, env.seller.emailAddress, env.seller.number, mefRequestBody.relatedContactInformation)}\",\n          \"id\":\"${entity.id}\",\n          \"orderDate\":\"${T(com.consoleconnect.kraken.operator.core.toolkit.DateTime).nowInUTCFormatted()}\",\n          \"productOrderItem\":\"${mefRequestBody.productOrderItem}\",\n          \"state\":\"@{{state}}\",\n         \"orderId\":\"@{{orderId}}\",\n         \"instanceId\":\"@{{instanceId}}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.order.uni.add.yaml": "\n---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.order.uni.add\n  name: Order Port API\n  mapperKey: mef.sonata.api-target-mapper.order.uni.add\n  version: 4\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n  trigger:\n    path: /mefApi/sonata/productOrderingManagement/v10/productOrder\n    method: post\n    productType: uni\n    actionType: add\n  endpoints:\n    - id: create port order\n      path: \"\"\n      method: \"\"\n      requestBody: ${mefRequestBody.productOrderItem[0].product.productConfiguration.uni}\n      responseBody: |\n        {\n          \"relatedContactInformation\":\"${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation(env.seller.role, env.seller.name, env.seller.emailAddress, env.seller.number, mefRequestBody.relatedContactInformation)}\",\n         \"id\":\"${entity.id}\",\n         \"orderDate\":\"${T(com.consoleconnect.kraken.operator.core.toolkit.DateTime).nowInUTCFormatted()}\",\n         \"productOrderItem\":\"${mefRequestBody.productOrderItem}\",\n         \"state\":\"@{{state}}\",\n         \"orderId\":\"@{{orderId}}\",\n         \"instanceId\":\"@{{instanceId}}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-specs/api-spec.inventory.yaml": "---\nkind: kraken.component.api-spec\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-spec.inventory\n  name: Product Inventory Management\n  icon: https://storage.googleapis.com/console-connect-static-assets/krakenUI/product-inventory.png\n  labels:\n    mef-api-release: grace\n    inventory-api-version: v7\n  version: 1\nspec:\n  baseSpec:\n    path: classpath:/mef-sonata/openapi/productInventoryManagement.api.yaml\n  customizedSpec:\n    path: classpath:/mef-sonata/openapi/productInventoryManagement.api.customized.yaml\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.inventory.uni.read.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.inventory.uni.read\n  name: Mapper Of reading product inventory  UNI\n  description: This operation retrieves a product entity\n  version: 13\nspec:\n  trigger:\n    path: /mefApi/sonata/productInventory/v7/product/{id}\n    method: get\n    productType: uni\n  endpoints:\n    - id: retrieve uni product inventory detail by id\n      path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n          - name: mapper.product.inventory.id\n            title: Identifier of the Product\n            description: \"\"\n            source: \"@{{id}}\"\n            sourceLocation: \"PATH\"\n            target: \"\"\n            targetLocation: \"\"\n            requiredMapping: true\n          - name: mapper.inventory.uni.read.buyerId\n            title: \"The unique identifier of the organization that is acting as the a Buyer\"\n            source: \"@{{buyerId}}\"\n            sourceLocation: \"QUERY\"\n            target: \"\"\n            targetType: string\n            targetLocation: \"\"\n            requiredMapping: false\n        response:\n          - name: mapper.product.inventory.read.status\n            title:  the status of a MEF product\n            description: \"\"\n            target: \"@{{status}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: true\n            targetValues:\n              - active\n              - active.pendingChange\n              - cancelled\n              - pendingActive\n              - pendingTerminate\n              - suspended\n              - suspendedPendingTerminate\n              - terminated\n            valueMapping: {}\n            source: \"\"\n            sourceLocation: \"\"\n          - name: mapper.inventory.read.startDate\n            title: The date from which the product starts\n            description: \"\"\n            target: \"@{{startDate}}\"\n            targetLocation: BODY\n            requiredMapping: true\n            source: \"\"\n            sourceLocation: \"\"\n\n\n",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.quote.uni.read.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.quote.uni.read\n  name: Quote Management API\n  mapperKey: mef.sonata.api-target-mapper.quote.uni.read\n  version: 1\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n  trigger:\n    path: /mefApi/sonata/quoteManagement/v8/quote/{id}\n    method: get\n    productType: uni\n  endpoints:\n    - id: retrieve quote for port\n      path: \"\"\n      method: \"\"\n      requestBody: ${entity.request.quoteItem[0].product.productConfiguration.uni}\n      responseBody: |\n        {\n         \"id\":\"${entity.id}\",\n         \"buyerRequestedQuoteLevel\":\"${entity.request.buyerRequestedQuoteLevel}\",\n         \"relatedContactInformation\":\"${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation(env.seller.role, env.seller.name, env.seller.emailAddress, env.seller.number, entity.request.relatedContactInformation)}\",\n         \"quoteItem\":[\n           {\n             \"product\":\"${entity.request.quoteItem[0].product}\",\n             \"state\":\"@{{quoteItem[*].state}}\",\n             \"quoteItemPrice\":{\n               \"price\":{\n                 \"dutyFreeAmount\":{\n                   \"unit\":\"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.unit}}\",\n                   \"value\":\"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.value}}\"\n                 }\n               }\n             }\n           }\n         ],\n         \"quoteDate\":\"${T(com.consoleconnect.kraken.operator.core.toolkit.DateTime).nowInUTCFormatted()}\",\n         \"externalId\":\"${entity.request[externalId]?:''}\",\n         \"instantSyncQuote\":\"${entity.request[instantSyncQuote]?:''}\",\n         \"requestedQuoteCompletionDate\":\"${entity.request[requestedQuoteCompletionDate]?:''}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.address.validate.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.address.validate\n  name: Geographic Address Management\n  mapperKey: mef.sonata.api-target-mapper.address.validate\n  version: 6\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n  trigger:\n    path: /mefApi/sonata/geographicAddressManagement/v7/geographicAddressValidation\n    method: post\n  endpoints:\n    - id: validate address\n      requestBody:\n      responseBody: |\n        {\n            \"validationResult\":\"((mefResponseBody.bestMatchGeographicAddress.id == '' ? (mefResponseBody.alternateGeographicAddress.size() == 0 ?'fail':'partial'): 'success'))\",\n            \"alternateGeographicAddress\":[\n                {\n\n                    \"id\":\"@{{alternateGeographicAddress[*].id}}\",\n                    \"@type\":\"FieldedAddress\",\n                    \"country\":\"@{{alternateGeographicAddress[*].country}}\",\n                    \"city\":\"@{{alternateGeographicAddress[*].city}}\",\n                    \"streetName\":\"@{{alternateGeographicAddress[*].streetName}}\",\n                    \"metroId\":\"@{{alternateGeographicAddress[*].metroId}}\"\n                }\n            ],\n            \"provideAlternative\":\"${mefRequestBody.provideAlternative}\",\n            \"submittedGeographicAddress\":\"${mefRequestBody.submittedGeographicAddress}\",\n            \"bestMatchGeographicAddress\":{\n                \"id\":\"@{{bestMatchGeographicAddress.id}}\",\n                \"type\":\"FieldedAddress\",\n                \"city\":\"@{{bestMatchGeographicAddress.city}}\",\n                \"country\":\"@{{bestMatchGeographicAddress.country}}\"\n            }\n        }\n\n",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.hub.add.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.hub.add\n  name: Order Connection API\n  mapperKey: mef.sonata.api-target-mapper.hub.add\n  version: 5\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - eventEntity\n  endpoints:\n    - id: register event\n      responseBody: |\n        {\n          \"id\":\"${eventEntity.id}\",\n          \"callback\":\"${mefRequestBody.callback}\",\n          \"query\":\"${mefRequestBody.query}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.product.offering.eline.add.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.poq.eline.add\n  name: Product Offering Qualification (POQ) API\n  mapperKey: mef.sonata.api-target-mapper.poq.eline.add\n  version: 1\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n  trigger:\n    path: /mefApi/sonata/productOfferingQualification/v7/productOfferingQualification\n    method: post\n    productType: access_e_line\n    actionType: add\n  endpoints:\n    - id: create a product offering qualification for connection\n      path: \"\"\n      method: \"\"\n      requestBody: ${mefRequestBody.productOfferingQualificationItem[0].product.productConfiguration.access_e_line}\n      responseBody: |\n        {\n          \"id\": \"${entity.id}\",\n          \"productOfferingQualificationItem\":[{\n              \"product\":\"${mefRequestBody.productOfferingQualificationItem[0].product}\",\n              \"action\":\"${mefRequestBody.productOfferingQualificationItem[0].action}\",\n              \"id\":\"${mefRequestBody.productOfferingQualificationItem[0].id}\",\n              \"state\":\"@{{itemState}}\"\n           }],\n          \"relatedContactInformation\":\"${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation(env.seller.role, env.seller.name, env.seller.emailAddress, env.seller.number, mefRequestBody.relatedContactInformation)}\",\n          \"state\":\"@{{state}}\"\n        }\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.order.notification.state.change.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.order.notification.state.change\n  name: Order Notification API\n  version: 1\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n  trigger:\n    path: /mefApi/sonata/productOrderingNotification/v10/listener/productOrderStateChangeEvent\n    method: post\n  endpoints:\n    - id: notify order state change\n      mappers:\n        serverKey: NONE\n        path: NONE\n        method: NONE\n        request:\n          - name: order_id\n            title: order id\n            description: Please specify the field that represent the order Id from Seller API request\n            source: \"\"\n            function: \"@spelFunc.renderId(source)\"\n            sourceLocation: \"\"\n            targetLocation: \"BODY\"\n            target: \"@{{event.id}}\"\n",
        "memory:console-core/mef-lso-sonata-api/apis/api.quote.yaml": "---\nkind: kraken.component.api\napiVersion: v1\nmetadata:\n  key: mef.sonata.api.quote\n  name: Quote Management\n  labels:\n    mef-api-release: grace\n    quote-api-version: v8\n  version: 7\nspec:\n  supportedProductTypesAndActions:\n    - path: /mefApi/sonata/quoteManagement/v8/quote\n      method: post\n      actionTypes:\n        - add\n      productTypes:\n        - UNI\n        - ACCESS_E_LINE\n    - path: /mefApi/sonata/quoteManagement/v8/quote/{id}\n      method: get\n      productTypes:\n        - UNI\n        - ACCESS_E_LINE\n  mappings:\n    - uri: ${env.target.url}\n      trigger:\n        path: /mefApi/sonata/quoteManagement/v8/quote\n        method: post\n      metadata:\n        cacheRequestBody: true\n      actions:\n        - id: calculate_quote_type_and_action_via_javascript\n          actionType: engine@javascript\n          env:\n            quoteItem: ${body['quoteItem'][0]}\n            instantSyncQuote: ${body.instantSyncQuote}\n          with:\n            code: |\n              (jsonStr) => {\n                console.log(\"input: \" + jsonStr);\n                let input = JSON.parse(jsonStr);\n                let targetAPIConfigKey = '';\n                let forwardDownstream = true;\n                if(input.quoteItem['product']['productConfiguration']['@type'] == 'UNI') {\n                  if(input.instantSyncQuote === true) {\n                    targetAPIConfigKey = 'mef.sonata.api-target.quote.uni.add.sync';\n                  } else {\n                    targetAPIConfigKey = 'mef.sonata.api-target.quote.uni.add';\n                  }\n                } else if(input.quoteItem['product']['productConfiguration']['@type'] == 'ACCESS_E_LINE') {\n                  if(input.instantSyncQuote === true) {\n                    targetAPIConfigKey = 'mef.sonata.api-target.quote.eline.add.sync';\n                  } else {\n                    targetAPIConfigKey = 'mef.sonata.api-target.quote.eline.add';\n                  }\n                } else {\n                  targetAPIConfigKey = 'targetKey:notFound';\n                }\n                let ret = {\n                  quoteType: input.quoteItem['product']['productConfiguration']['@type'],\n                  instantSyncQuote: input.instantSyncQuote,\n                  forwardDownstream: forwardDownstream,\n                  targetAPIConfigKey: targetAPIConfigKey\n                };\n                return JSON.stringify(ret);\n              }\n          outputKey: quote\n\n        - id: mapping_matrix_check_quote\n          actionType: buildin@mapping-matrix-checker\n          env:\n            mappingMatrixKey: mef.sonata.api.matrix.quote\n            targetKey: ${quote.targetAPIConfigKey}\n        - id: persist_http_request\n          actionType: buildin@db\n          env:\n            bizType: ${quote.quoteType}\n          with:\n            action: create\n            properties:\n              - headers\n              - queryParameters\n              - requestBody\n          preRequest: true\n\n        - id: load-downstream-api-config\n          actionType: buildin@load-target-api-config\n          env:\n            configKey: ${quote.targetAPIConfigKey}\n            mefQuery: ${query}\n            mefRequestBody: ${body}\n            entity: ${entity}\n          with:\n            render: true\n          outputKey: targetApiConfig\n\n        - id: rewrite-path\n          actionType: buildin@rewrite-path\n          env:\n            path: ${targetApiConfig.endpoints[0].path}\n            method: ${targetApiConfig.endpoints[0].method}\n\n        - id: modify-request-body-for-quote-add\n          actionType: buildin@modify-request-body\n          env:\n            code: ${targetApiConfig.endpoints[0].requestBody}\n\n        - id: modify-response-body-for-quote-add\n          actionType: buildin@modify-response-body\n          with:\n            engine: spel\n            successStatus: 201\n          env:\n            code: ${targetApiConfig.endpoints[0].responseBody}\n            inputs: ${targetApiConfig.inputs}\n            mefRequestBody: ${body}\n          postResultRender: true\n\n        - actionType: buildin@db\n          with:\n            action: update\n            properties:\n              - responseBody\n              - responseStatusCode\n              - renderedResponseBody\n          preRequest: false\n          postRequest: true\n          order: -4\n\n    - uri: ${env.target.url}\n      trigger:\n        path: /mefApi/sonata/quoteManagement/v8/quote/**\n        method: get\n      metadata:\n        cacheRequestBody: false\n      actions:\n        - name: retrieve quoteId from path\n          actionType: buildin@pattern\n          env:\n            input: ${path}\n            pattern: /mefApi/sonata/quoteManagement/v8/quote/(?<segment>.*)\n\n        - id: read request payload by id\n          actionType: buildin@db\n          env:\n            id: ${segment}\n          with:\n            action: read\n          preRequest: true\n\n        - id: calculate_quote_type_for_read_via_javascript\n          actionType: engine@javascript\n          env:\n            bizType: ${entity.bizType}\n            instantSyncQuote: ${entity.request.instantSyncQuote}\n          with:\n            code: |\n              (jsonStr) => {\n                console.log(\"input: \" + jsonStr);\n                let input = JSON.parse(jsonStr);\n                let targetAPIConfigKey = '';\n                let forwardDownstream = true;\n                if(input.bizType == 'UNI') {\n                  if(input.instantSyncQuote === true) {\n                    targetAPIConfigKey = 'mef.sonata.api-target.quote.uni.read.sync';\n                    forwardDownstream = false;\n                  } else {\n                    targetAPIConfigKey = 'mef.sonata.api-target.quote.uni.read';\n                  }\n                } else if(input.bizType == 'ACCESS_E_LINE') {\n                  if(input.instantSyncQuote === true) {\n                    targetAPIConfigKey = 'mef.sonata.api-target.quote.eline.read.sync';\n                    forwardDownstream = false;\n                  } else {\n                    targetAPIConfigKey = 'mef.sonata.api-target.quote.eline.read';\n                  }\n                } else {\n                  targetAPIConfigKey = 'targetKey:notFound';\n                }\n                let ret = {\n                  quoteType: input.bizType,\n                  instantSyncQuote: input.instantSyncQuote,\n                  forwardDownstream: forwardDownstream,\n                  targetAPIConfigKey: targetAPIConfigKey\n                };\n                return JSON.stringify(ret);\n              }\n          outputKey: quote\n        - id: load-downstream-api-config-quote-read\n          actionType: buildin@load-target-api-config\n          env:\n            configKey: ${quote.targetAPIConfigKey}\n            mefQuery: ${query}\n            entity: ${entity}\n          with:\n            render: true\n          outputKey: targetApiConfig\n\n        - id: rewrite-path\n          actionType: buildin@rewrite-path\n          env:\n            path: ${targetApiConfig.endpoints[0].path}\n            method: ${targetApiConfig.endpoints[0].method}\n\n        - id: mock-response\n          actionType: buildin@mock-response\n          env:\n            forwardDownstream: ${quote.forwardDownstream}\n\n        - id: modify-request-body\n          actionType: buildin@modify-request-body\n          env:\n            code: ${targetApiConfig.endpoints[0].requestBody}\n\n        - id: modify-response-body\n          actionType: buildin@modify-response-body\n          with:\n            engine: spel\n          env:\n            code: ${targetApiConfig.endpoints[0].responseBody}\n            inputs: ${targetApiConfig.inputs}\n    - trigger:\n        path: /mefApi/sonata/quoteManagement/v8/quote/hub\n        method: post\n      metadata:\n        cacheRequestBody: true\n      actions:\n        - id: calculate_quote_event_types_via_javascript\n          actionType: engine@javascript\n          env:\n            query: ${body.query}\n          with:\n            code: |\n              (jsonStr) => {\n                console.log(\"input: \" + jsonStr);\n                let input = JSON.parse(jsonStr);\n                let query = input.query;\n                let arr = query.split(\"=\");\n                let eventArr = arr[1].split(\",\");\n                let ret = {\n                  \"eventTypes\":eventArr,\n                  \"targetAPIConfigKey\":\"mef.sonata.api-target.hub.add\"\n                };\n                return JSON.stringify(ret);\n              }\n          outputKey: event\n        - id: register-quote-event\n          actionType: buildin@register-event\n          env:\n            eventTypes: ${event.eventTypes}\n          with:\n            action: register\n\n        - id: load-downstream-api-config\n          actionType: buildin@load-target-api-config\n          env:\n            configKey: ${event.targetAPIConfigKey}\n            mefRequestBody: ${body}\n            entity: ${entity}\n          with:\n            render: true\n          outputKey: targetApiConfig\n\n        - id: mock-response\n          actionType: buildin@mock-response\n\n        - id: modify-response-body\n          actionType: buildin@modify-response-body\n          with:\n            engine: spel\n          env:\n            code: ${targetApiConfig.endpoints[0].responseBody}\n            inputs: ${targetApiConfig.inputs}\nlinks:\n  - targetAssetKey: mef.sonata.api-target.quote.eline.add\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-target.quote.eline.read\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-target.quote.uni.add\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-target.quote.uni.read\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-target.quote.eline.add.sync\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-target.quote.eline.read.sync\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-target.quote.uni.add.sync\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-target.quote.uni.read.sync\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-spec.quote\n    relationship: implementation.standard.api-spec\n  - targetAssetKey: mef.sonata.api-target-mapper.quote.eline.add\n    relationship: implementation.target-mapper\n  - targetAssetKey: mef.sonata.api-target-mapper.quote.uni.add\n    relationship: implementation.target-mapper\n  - targetAssetKey: mef.sonata.api-target-mapper.quote.uni.read\n    relationship: implementation.target-mapper\n  - targetAssetKey: mef.sonata.api-target-mapper.quote.eline.read\n    relationship: implementation.target-mapper\n  - targetAssetKey: mef.sonata.api-target-mapper.quote.eline.add.sync\n    relationship: implementation.target-mapper\n  - targetAssetKey: mef.sonata.api-target-mapper.quote.uni.add.sync\n    relationship: implementation.target-mapper\n  - targetAssetKey: mef.sonata.api-target-mapper.quote.uni.read.sync\n    relationship: implementation.target-mapper\n  - targetAssetKey: mef.sonata.api-target-mapper.quote.eline.read.sync\n    relationship: implementation.target-mapper",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.order.uni.read.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.order.uni.read\n  name: Mapper Of Reading Order Port\n  description: This operation retrieves a ProductOrder entity\n  version: 3\nspec:\n  trigger:\n    path: /mefApi/sonata/productOrderingManagement/v10/productOrder/{id}\n    method: get\n    productType: uni\n  endpoints:\n    - id: retrieve connection detail by id\n      path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n          - name: mapper.order.uni.read.buyerId\n            title: \"The unique identifier of the organization that is acting as the a Buyer.\"\n            description: \"\"\n            source: \"@{{buyerId}}\"\n            sourceLocation: \"QUERY\"\n            target: \"\"\n            targetLocation: \"\"\n            requiredMapping: false\n        response:\n          - name: mapper.order.uni.read.state\n            title: \"ProductOrderState\"\n            description: \"\"\n            target: \"@{{state}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: true\n            targetValues:\n              - acknowledged\n              - assessingCancellation\n              - held.assessingCharge\n              - pending.assessingModification\n              - cancelled\n              - pendingCancellation\n              - completed\n              - failed\n              - inProgress\n              - partial\n              - rejected\n            valueMapping: {}\n            source: \"\"\n            sourceLocation: \"\"\n          - name: mapper.order.uni.read.instanceId\n            title: \"instance id from seller\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{instanceId}}\"\n            targetLocation: \"BODY\"\n            requiredMapping: false\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.quote.eline.add.sync.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.quote.eline.add.sync\n  name: Mapper Of Creating Quote Eline\n  description: This operation creates a Quote entity\n  version: 2\nspec:\n  trigger:\n    path: /mefApi/sonata/quoteManagement/v8/quote\n    method: post\n    productType: access_e_line\n    actionType: add\n    quoteLevel: firm\n    syncMode: true\n  endpoints:\n    - id: create quote for connection\n      path: /api/pricing/calculate\n      method: post\n      serverKey: mef.sonata.api-target-spec.con1718940696857\n      mappers:\n        request:\n        response:\n          - name: mapper.quote.eline.add.sync.unitOfMeasure\n            title: \"Unit of Measure if price depending on it\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.unitOfMeasure}}\"\n            targetLocation: BODY\n            requiredMapping: false\n          - name: mapper.quote.eline.add.sync.price.unit\n            title: \"Currency (ISO4217 norm uses 3 letters to define the currency)\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.unit}}\"\n            targetLocation: BODY\n            requiredMapping: true\n          - name: mapper.quote.eline.add.sync.price.value\n            title: \"Duty free price value\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.value}}\"\n            targetLocation: BODY\n            requiredMapping: true\n            checkPath: \"$['quoteItem'][0]['quoteItemPrice'][0]['price']['dutyFreeAmount']['unit']\"\n            deletePath: \"$['quoteItem'][0]['quoteItemPrice']\"\n          - name: mapper.quote.eline.add.sync.taxRate\n            title: \"Price Tax Rate. Unit: [%]. E.g. value 16 stand for 16% tax\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{}}\"\n            targetLocation: BODY\n            requiredMapping: false\n          - name: mapper.quote.eline.add.sync.taxIncludedAmount.unit\n            title: \"Currency (ISO4217 norm uses 3 letters to define the currency)\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.price.taxIncludedAmount.unit}}\"\n            targetLocation: BODY\n            requiredMapping: false\n          - name: mapper.quote.eline.add.sync.taxIncludedAmount.value\n            title: \"Tax included price value\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.price.taxIncludedAmount.value}}\"\n            targetLocation: BODY\n            requiredMapping: false\n          - name: mapper.quote.eline.add.sync.quoteItemPrice.name\n            title: \"Name of the quote item price\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.name}}\"\n            targetLocation: BODY\n            requiredMapping: false\n          - name: mapper.quote.eline.add.sync.quoteItemPrice.priceType\n            title: \"Indicates if the price is for recurring or non-recurring charges\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.priceType}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: false\n            targetValues:\n              - recurring\n              - nonRecurring\n              - usageBased\n            valueMapping: {}\n          - name: mapper.quote.eline.add.sync.quoteItemPrice.description\n            title: \"Description of the quote item price\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.description}}\"\n            targetLocation: BODY\n            requiredMapping: false\n          - name: mapper.quote.eline.add.sync.quoteItemPrice.recurringChargePeriod\n            title: \"Used for a recurring charge to indicate period\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.recurringChargePeriod}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: false\n            targetValues:\n              - hour\n              - day\n              - week\n              - month\n              - year\n            valueMapping: {}",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.inventory.eline.list.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.inventory.eline.list\n  name: Inventory Connection API\n  mapperKey: mef.sonata.api-target-mapper.inventory.eline.list\n  version: 2\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n  trigger:\n    path: /mefApi/sonata/productInventory/v7/product\n    method: get\n    productType: access_e_line\n  endpoints:\n    - id: list eline product\n      pathReferId: \"mef.sonata.api-target-mapper.order.eline.add#mapper.order.eline.add.orderId\"\n      responseBody: |\n        [\n          {\n            \"id\":\"@{{id}}\",\n            \"startDate\":\"@{{startDate}}\",\n            \"status\":\"@{{[*].status}}\"\n          }\n        ]",
        "memory:console-core/mef-lso-sonata-api/apis/api.notification.yaml": "---\nkind: kraken.component.api\napiVersion: v1\nmetadata:\n  key: mef.sonata.api.notification\n  name: Product notification API\n  labels:\n    mef-api-release: grace\n    order-api-version: v10\n  version: 1\nspec:\n  mappings:\n    - uri: ${env.target.url}\n      trigger:\n        path: /mefApi/listener/notification\n        method: post\n        queryParams:\n          - eventType\n      metadata:\n        cacheRequestBody: true\n      actions:\n        - id: persist_http_request\n          actionType: buildin@db\n          env:\n            bizType: notification\n          with:\n            action: create\n            properties:\n              - headers\n              - queryParameters\n              - requestBody\n          preRequest: true\n\n        - id: read-event\n          actionType: buildin@register-event\n          env:\n            eventType: ${query.eventType}\n          with:\n            action: read\n          preRequest: true\n\n        - id: calculate_target_api_via_javascript\n          actionType: engine@javascript\n          env:\n            eventType: ${query.eventType}\n          with:\n            code: |\n              (jsonStr) => {\n                console.log(\"input: \" + jsonStr);\n                let input = JSON.parse(jsonStr);\n                let targetAPIConfigKey = '';\n                if(input.eventType = 'productOrderStateChangeEvent') {\n                  targetAPIConfigKey = 'mef.sonata.api-target.order.notification.state.change';\n                } else if(input.eventType = 'poqStateChangeEvent') {\n                  targetAPIConfigKey = 'mef.sonata.api-target.poq.notification.state.change';\n                } else if(input.eventType = 'quoteStateChangeEvent') {\n                  targetAPIConfigKey = 'mef.sonata.api-target.quote.notification.state.change';\n                }\n                let ret = {\n                  targetAPIConfigKey: targetAPIConfigKey\n                };\n                return JSON.stringify(ret);\n              }\n          outputKey: event\n        - id: load-downstream-api-config\n          actionType: buildin@load-target-api-config\n          env:\n            configKey: ${event.targetAPIConfigKey}\n            mefQuery: ${query}\n            mefRequestBody: ${body}\n            entity: ${entity}\n            eventEntity: ${eventEntity}\n          with:\n            render: true\n          outputKey: targetApiConfig\n\n        - id: rewrite-path\n          actionType: buildin@rewrite-path\n          env:\n            path: ${targetApiConfig.endpoints[0].path}\n            method: ${targetApiConfig.endpoints[0].method}\n\n        - id: modify-request-body\n          actionType: buildin@modify-request-body\n          env:\n            code: ${targetApiConfig.endpoints[0].requestBody}\n\n        - id: modify-response-body\n          actionType: buildin@modify-response-body\n          with:\n            engine: spel\n            successStatus: 201\n          env:\n            code: ${targetApiConfig.endpoints[0].responseBody}\n            inputs: ${targetApiConfig.inputs}\n\n        - id: persist_http_response\n          actionType: buildin@db\n          with:\n            action: update\n            properties:\n              - responseBody\n              - responseStatusCode\n          preRequest: false\n          postRequest: true\n          order: -4\n\n",
        "memory:console-core/mef-lso-sonata-api/mapping-matrix/mapping.matrix.order.yaml": "---\nkind: kraken.product.mapping.matrix\napiVersion: v1\nmetadata:\n  key: mef.sonata.api.matrix.order\n  name: MEF Sonata API\n  labels:\n    mef-api-release: grace\n  version: 11\nspec:\n  matrix:\n    mef.sonata.api-target.order.uni.add:\n      - name: product_type_UNI\n        path: \"$.body.productOrderItem[*].product.productConfiguration.['@type']\"\n        expected: UNI\n      - name: action_add\n        path: \"$.body.productOrderItem[*].['action']\"\n        expected: add\n    mef.sonata.api-target.order.eline.add:\n      - name: product_type_eline\n        path: \"$.body.productOrderItem[*].product.productConfiguration.['@type']\"\n        expected: ACCESS_E_LINE\n      - name: action_add\n        path: \"$.body.productOrderItem[*].['action']\"\n        expected: add\n    mef.sonata.api-target.order.eline.delete:\n      - name: product_type_eline\n        path: \"$.body.productOrderItem[*].product.productConfiguration.['@type']\"\n        expected: ACCESS_E_LINE\n      - name: action_delete\n        path: \"$.body.productOrderItem[*].['action']\"\n        expected: delete\n    mef.sonata.api-target.order.uni.delete:\n      - name: product_type_uni\n        path: \"$.body.productOrderItem[*].product.productConfiguration.['@type']\"\n        expected: UNI\n      - name: action_delete\n        path: \"$.body.productOrderItem[*].['action']\"\n        expected: delete\n\n",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.inventory.uni.list.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.inventory.uni.list\n  name: Inventory Connection API\n  mapperKey: mef.sonata.api-target-mapper.inventory.uni.list\n  version: 2\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n  trigger:\n    path: /mefApi/sonata/productInventory/v7/product\n    method: get\n    productType: uni\n  endpoints:\n    - id: list uni product\n      pathReferId: \"mef.sonata.api-target-mapper.order.uni.add#mapper.order.uni.add.orderId\"\n      responseBody: |\n            [\n              {\n                \"id\":\"@{{id}}\",\n                \"startDate\":\"@{{startDate}}\",\n                \"status\":\"@{{[*].status}}\"\n              }\n            ]",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.order.notification.state.change.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.order.notification.state.change\n  name: Order Connection API\n  mapperKey: mef.sonata.api-target-mapper.order.notification.state.change\n  version: 1\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n    - eventEntity\n  trigger:\n    path: /mefApi/sonata/productOrderingNotification/v10/listener/productOrderStateChangeEvent\n    method: post\n  endpoints:\n    - id: notify order state change\n      path: \"/mefApi/sonata/productOrderingNotification/v10/listener/productOrderStateChangeEvent\"\n      url: \"${eventEntity.registerInfo.callback}\"\n#      path: \"/anything\"\n      method: post\n      requestBody: |\n        {\n          \"eventId\":\"${eventEntity.id}\",\n          \"eventTime\":\"${T(com.consoleconnect.kraken.operator.core.toolkit.DateTime).nowInUTCFormatted()}\",\n          \"eventType\":\"${mefQuery.eventType}\",\n          \"event\":{\n            \"id\":\"\"\n          }\n        }\n      responseBody:\n",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.product.offering.uni.add.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.poq.uni.add\n  name: Product Offering Qualification (POQ) API\n  mapperKey: mef.sonata.api-target-mapper.poq.uni.add\n  version: 1\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n  trigger:\n    path: /mefApi/sonata/productOfferingQualification/v7/productOfferingQualification\n    method: post\n    productType: uni\n    actionType: add\n  endpoints:\n    - id: create a product offering qualification for port\n      path: \"\"\n      method: \"\"\n      requestBody: ${mefRequestBody.productOfferingQualificationItem[0].product.productConfiguration.uni}\n      responseBody: |\n        {\n          \"id\": \"${entity.id}\",\n          \"productOfferingQualificationItem\":[{\n              \"product\":\"${mefRequestBody.productOfferingQualificationItem[0].product}\",\n              \"action\":\"${mefRequestBody.productOfferingQualificationItem[0].action}\",\n              \"id\":\"${mefRequestBody.productOfferingQualificationItem[0].id}\",\n              \"state\":\"@{{itemState}}\"\n           }],\n          \"relatedContactInformation\":\"${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation(env.seller.role, env.seller.name, env.seller.emailAddress, env.seller.number, mefRequestBody.relatedContactInformation)}\",\n          \"state\":\"@{{state}}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.order.eline.add.yaml": "\n---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.order.eline.add\n  name:  Mapper Of Creating Order Connection\n  description: This operation creates a ProductOrder entity\n  version: 3\nspec:\n  trigger:\n    path: /mefApi/sonata/productOrderingManagement/v10/productOrder\n    method: post\n    productType: access_e_line\n    actionType: add\n  endpoints:\n    - id: create connection order\n      path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n          - name: mapper.order.uni.add.buyerId\n            title: \"The unique identifier of the organization that is acting as the a Buyer.\"\n            description: \"\"\n            source: \"@{{buyerId}}\"\n            sourceLocation: \"QUERY\"\n            target: \"\"\n            targetLocation: \"\"\n            requiredMapping: false\n        response:\n          - name: mapper.order.eline.add.state\n            title: \"Order State\"\n            description: \"\"\n            target: \"@{{state}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: true\n            targetValues:\n              - acknowledged\n              - assessingCancellation\n              - held.assessingCharge\n              - pending.assessingModification\n              - cancelled\n              - pendingCancellation\n              - completed\n              - failed\n              - inProgress\n              - partial\n              - rejected\n            valueMapping: {}\n            source: \"\"\n            sourceLocation: \"\"\n          - name: mapper.order.eline.add.orderId\n            title: \"order Id from seller\"\n            description: orderId mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{orderId}}\"\n            targetLocation: BODY\n            requiredMapping: true\n          - name: mapper.order.eline.add.instanceId\n            title: \"instance id from seller\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{instanceId}}\"\n            targetLocation: \"BODY\"\n            requiredMapping: false\n",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.product.offering.eline.read.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.poq.eline.read\n  name: Product Offering Qualification (POQ) API\n  mapperKey: mef.sonata.api-target-mapper.poq.eline.read\n  version: 1\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n  trigger:\n    path: /mefApi/sonata/productOfferingQualification/v7/productOfferingQualification/{id}\n    method: get\n    productType: access_e_line\n  endpoints:\n    - id: Retrieves a product offering qualification by id for connection\n      path: \"\"\n      method: \"\"\n      requestBody: ${entity.request.productOfferingQualificationItem[0].product.productConfiguration.access_e_line}\n      responseBody: |\n        {\n          \"id\":\"${entity.id}\",\n          \"productOfferingQualificationItem\":[{\n              \"product\":\"${entity.request.productOfferingQualificationItem[0].product}\",\n              \"action\":\"${entity.request.productOfferingQualificationItem[0].action}\",\n              \"id\":\"${entity.request.productOfferingQualificationItem[0].id}\",\n              \"state\":\"@{{itemState}}\"\n           }],\n          \"relatedContactInformation\":\"${entity.request.relatedContactInformation}\",\n          \"state\":\"@{{state}}\"\n        }\n",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.order.uni.read.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.order.uni.read\n  mapperKey: mef.sonata.api-target-mapper.order.uni.read\n  name: Order Connection API\n  version: 8\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n  trigger:\n    path: /mefApi/sonata/productOrderingManagement/v10/productOrder/{id}\n    method: get\n    productType: uni\n  endpoints:\n    - id: retrieve connection detail by id\n      path: \"\"\n      method: \"\"\n      pathReferId: \"mef.sonata.api-target-mapper.order.uni.add#mapper.order.uni.add.orderId\"\n      responseBody: |\n        { \n          \"id\":\"${entity.id}\",\n          \"relatedContactInformation\":\"${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation(env.seller.role, env.seller.name, env.seller.emailAddress, env.seller.number, entity.request.relatedContactInformation)}\",\n          \"productOrderItem\":\"${entity.request.productOrderItem}\",\n          \"state\":\"@{{state}}\",\n          \"orderDate\":\"${entity.renderedResponse.orderDate}\",\n          \"orderId\":\"${entity.renderedResponse.orderId}\",\n          \"instanceId\":\"@{{instanceId}}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.poq.notification.state.change.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.poq.notification.state.change\n  name: Order Connection API\n  mapperKey: mef.sonata.api-target-mapper.poq.notification.state.change\n  version: 1\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n    - eventEntity\n  trigger:\n    path: /mefApi/sonata/productOfferingQualificationNotification/v7/listener/poqStateChangeEvent\n    method: post\n  endpoints:\n    - id: notify poq state change\n      path: \"/mefApi/sonata/quoteNotification/v8/listener/quoteStateChangeEvent\"\n      url: \"${eventEntity.registerInfo.callback}\"\n#      path: \"/anything\"\n      method: post\n      requestBody: |\n        {\n          \"eventId\":\"${eventEntity.id}\",\n          \"eventTime\":\"${T(com.consoleconnect.kraken.operator.core.toolkit.DateTime).nowInUTCFormatted()}\",\n          \"eventType\":\"${mefQuery.eventType}\",\n          \"event\":{\n            \"id\":\"\"\n          }\n        }\n      responseBody:\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.hub.add.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.hub.add\n  name: Order Hub API\n  version: 5\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n  trigger:\n    path: /mefApi/sonata/productOrderingManagement/v10/productOrder/hub\n    method: post\n  endpoints:\n    - id: register order event\n      mappers:\n        request:\n        response:",
        "memory:console-core/mef-lso-sonata-api/README.md": "# kraken-api-mef-sonata\nMEF sonata API configuration \n",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.quote.eline.read.sync.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.quote.eline.read.sync\n  name: Quote Connection API\n  mapperKey: mef.sonata.api-target-mapper.quote.eline.read.sync\n  version: 2\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n  trigger:\n    path: /mefApi/sonata/quoteManagement/v8/quote/{id}\n    method: get\n    productType: access_e_line\n  endpoints:\n    - id: retrieve quote for connection\n      url: ${env.target.url}\n      path:\n      method:\n      requestBody: ${entity.request.quoteItem[0].product.productConfiguration.access_e_line}\n      responseBody: |\n        {\n          \"id\":\"${entity.id}\",\n          \"relatedContactInformation\":\"${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation(env.seller.role, env.seller.name, env.seller.emailAddress, env.seller.number, entity.request.relatedContactInformation)}\",\n          \"buyerRequestedQuoteLevel\":\"${entity.request.buyerRequestedQuoteLevel}\",\n          \"quoteItem\":[{\n            \"product\":\"${entity.request.quoteItem[0].product}\",\n            \"action\":\"${entity.request.quoteItem[0].action}\",\n            \"id\":\"${entity.request.quoteItem[0].id}\",\n            \"state\":\"${entity.renderedResponse.quoteItem[0].state}\",\n            \"quoteItemPrice\":\"${entity.renderedResponse.quoteItem[0].quoteItemPrice}\"\n          }],\n          \"quoteDate\":\"${T(com.consoleconnect.kraken.operator.core.toolkit.DateTime).nowInUTCFormatted()}\",\n          \"externalId\":\"${entity.request[externalId]?:''}\",\n          \"instantSyncQuote\":\"${entity.request[instantSyncQuote]?:''}\",\n          \"requestedQuoteCompletionDate\":\"${entity.request[requestedQuoteCompletionDate]?:''}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.quote.eline.read.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.quote.eline.read\n  name: Mapper Of Reading Quote Eline\n  description: This operation retrieves a Quote entity. Attribute selection is enabled for all first level attributes.\n  version: 4\nspec:\n  trigger:\n    path: /mefApi/sonata/quoteManagement/v8/quote/{id}\n    method: get\n    productType: access_e_line\n    quoteLevel: firm\n    syncMode: false\n  endpoints:\n    - id: retrieve quote for connection\n      path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n        response:\n          - name: mapper.quote.eline.read.state\n            title: Quote State Mapping\n            description: quote state mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{quoteItem[*].state}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: true\n            targetValues:\n              - accepted\n              - acknowledged\n              - answered\n              - approved.orderable\n              - approved.orderableAlternate\n              - inProgress\n              - inProgress.draft\n              - abandoned\n              - rejected\n              - unableToProvide\n            valueMapping: {}\n          - name: mapper.eline.read.price.value\n            title: Quote Price Value Mapping\n            description: quote price value mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.value}}\"\n            targetLocation: BODY\n            requiredMapping: true\n          - name: mapper.quote.eline.read.price.unit\n            title: Quote Price Unit Mapping\n            description: quote price unit mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.unit}}\"\n            targetLocation: BODY\n            requiredMapping: true\n\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.quote.uni.add.sync.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.quote.uni.add.sync\n  name: Mapper Of Creating Quote UNI\n  description: This operation creates a Quote entity\n  version: 2\nspec:\n  trigger:\n    path: /mefApi/sonata/quoteManagement/v8/quote\n    method: post\n    productType: uni\n    actionType: add\n    quoteLevel: firm\n    syncMode: true\n  endpoints:\n    - id: create quote for port\n      path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n        response:\n          - name: mapper.quote.uni.add.sync.unitOfMeasure\n            title: \"Unit of Measure if price depending on it\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.unitOfMeasure}}\"\n            targetLocation: BODY\n            requiredMapping: false\n          - name: mapper.quote.uni.add.sync.price.unit\n            title: \"Currency (ISO4217 norm uses 3 letters to define the currency)\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.unit}}\"\n            targetLocation: BODY\n            requiredMapping: true\n          - name: mapper.quote.uni.add.sync.price.value\n            title: \"Duty free price value\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.value}}\"\n            targetLocation: BODY\n            requiredMapping: true\n            checkPath: \"$['quoteItem'][0]['quoteItemPrice'][0]['price']['dutyFreeAmount']['unit']\"\n            deletePath: \"$['quoteItem'][0]['quoteItemPrice']\"\n          - name: mapper.quote.uni.add.sync.taxRate\n            title: \"Price Tax Rate. Unit: [%]. E.g. value 16 stand for 16% tax\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{}}\"\n            targetLocation: BODY\n            requiredMapping: false\n          - name: mapper.quote.uni.add.sync.taxIncludedAmount.unit\n            title: \"Currency (ISO4217 norm uses 3 letters to define the currency)\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.price.taxIncludedAmount.unit}}\"\n            targetLocation: BODY\n            requiredMapping: false\n          - name: mapper.quote.uni.add.sync.taxIncludedAmount.value\n            title: \"Tax included price value\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.price.taxIncludedAmount.value}}\"\n            targetLocation: BODY\n            requiredMapping: false\n          - name: mapper.quote.uni.add.sync.quoteItemPrice.name\n            title: \"Name of the quote item price\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.name}}\"\n            targetLocation: BODY\n            requiredMapping: false\n          - name: mapper.quote.uni.add.sync.quoteItemPrice.priceType\n            title: \"Indicates if the price is for recurring or non-recurring charges\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.priceType}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: false\n            targetValues:\n              - recurring\n              - nonRecurring\n              - usageBased\n            valueMapping: {}\n          - name: mapper.quote.uni.add.sync.quoteItemPrice.description\n            title: \"Description of the quote item price\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.description}}\"\n            targetLocation: BODY\n            requiredMapping: false\n          - name: mapper.quote.uni.add.sync.quoteItemPrice.recurringChargePeriod\n            title: \"Used for a recurring charge to indicate period\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: BODY\n            target: \"@{{quoteItem.quoteItemPrice.recurringChargePeriod}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: false\n            targetValues:\n              - hour\n              - day\n              - week\n              - month\n              - year\n            valueMapping: {}",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.product.offering.uni.read.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.poq.uni.read\n  name: Product Offering Qualification (POQ) API\n  description: |\n    The Buyer requests a list of POQs from the Seller based on a set of POQ\n    filter criteria (as described in MEF79). For each POQ returned, the\n    Seller also provides a POQ Identifier that uniquely identifies this POQ\n    within the Seller's system. The order of the elements returned to the\n    Buyer is defined by the Seller (e.g. natural order) and does not change\n    between the pages. If criteria for attribute X are provided, all\n    returned items must match it.\nspec:\n  trigger:\n    path: /mefApi/sonata/productOfferingQualification/v7/productOfferingQualification/{id}\n    method: get\n    productType: uni\n  endpoints:\n    - id: Retrieves a product offering qualification by id for port\n      path: \"\"\n      method: \"\"\n      mappers:\n        request:\n        response:\n          - name: mapper.poq.uni.read.itemState\n            title: POQ Item State Mapping\n            description: POQ Item state mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{itemState}}\"\n            targetType: enum\n            targetLocation: BODY\n            targetValues:\n              - acknowledged\n              - done.ready\n              - done.abandoned\n              - terminatedWithError\n              - approved.orderableAlternate\n              - inProgress\n            valueMapping: {}\n            defaultValue: \"done.ready\"\n            requiredMapping: false\n          - name: mapper.poq.uni.read.state\n            title: POQ State Mapping\n            description: quote state mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{state}}\"\n            targetType: enum\n            targetLocation: BODY\n            targetValues:\n              - acknowledged\n              - done.ready\n              - done.unableToProvide\n              - terminatedWithError\n              - approved.orderableAlternate\n              - inProgress\n            valueMapping: {}\n            defaultValue: \"done.ready\"\n            requiredMapping: false",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.poq.notification.state.change.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.poq.notification.state.change\n  name: Poq Notification API\n  version: 1\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n  trigger:\n    path: /mefApi/sonata/productOfferingQualificationNotification/v7/listener/poqStateChangeEvent\n    method: post\n  endpoints:\n    - id: notify poq state change\n      mappers:\n        serverKey: NONE\n        path: NONE\n        method: NONE\n        request:\n          - name: order_id\n            title: order id\n            description: Please specify the field that represent the order Id from Seller API request\n            source: \"\"\n            function: \"@spelFunc.renderId(source)\"\n            sourceLocation: \"\"\n            targetLocation: \"BODY\"\n            target: \"@{{event.id}}\"\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.quote.uni.read.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.quote.uni.read\n  name: Mapper Of Reading Quote UNI\n  description: This operation retrieves a Quote entity. Attribute selection is enabled for all first level attributes.\n  version: 3\nspec:\n  trigger:\n    path: /mefApi/sonata/quoteManagement/v8/quote/{id}\n    method: get\n    productType: uni\n    quoteLevel: firm\n    syncMode: false\n  endpoints:\n    - id: retrieve quote for port\n      path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n        response:\n          - name: mapper.quote.uni.read.state\n            title: Quote State Mapping\n            description: quote state mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{quoteItem[*].state}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: true\n            targetValues:\n              - accepted\n              - acknowledged\n              - answered\n              - approved.orderable\n              - approved.orderableAlternate\n              - cancelled\n              - unableToProvide\n              - declined\n              - expired\n              - inProgress\n              - inProgress.draft\n              - rejected\n            valueMapping: {}\n          - name: mapper.quote.uni.read.price.value\n            title: Quote Price Value Mapping\n            description: quote price value mapping\n            source: \"\"\n            sourceLocation:\n            target: \"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.value}}\"\n            targetLocation: BODY\n            requiredMapping: true\n          - name: mapper.quote.uni.read.price.unit\n            title: Quote Price Unit Mapping\n            description: quote price unit mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.unit}}\"\n            targetLocation: BODY\n            requiredMapping: true",
        "memory:console-core/mef-lso-sonata-api/apis/api.address.yaml": "---\nkind: kraken.component.api\napiVersion: v1\nmetadata:\n  key: mef.sonata.api.serviceability.address\n  name: Geographic Address Management\n  labels:\n    mef-api-release: grace\n    address-api-version: v7\n  version: 3\nspec:\n  supportedProductTypesAndActions:\n    - path: /mefApi/sonata/geographicAddressManagement/v7/geographicAddressValidation\n      method: post\n    - path: /mefApi/sonata/geographicAddressManagement/v7/geographicAddress/{id}\n      method: get\n  mappings:\n    - uri: ${env.target.url}\n      trigger:\n        path: /mefApi/sonata/geographicAddressManagement/v7/geographicAddressValidation\n        method: post\n      metadata:\n        cacheRequestBody: true\n      actions:\n        - id: persist_http_request_address_validate\n          actionType: buildin@db\n          env:\n            bizType: \"address.validate\"\n          with:\n            action: create\n            properties:\n              - headers\n              - queryParameters\n              - requestBody\n          preRequest: true\n        - id: calculate_address_type_and_action_via_javascript\n          actionType: engine@javascript\n          with:\n            code: |\n              (jsonstr) => {\n                        let ret = {\n                            targetAPIConfigKey: 'mef.sonata.api-target.address.validate'\n                         };\n                return JSON.stringify(ret);\n              }\n          outputKey: address\n        - id: load-downstream-api-config\n          actionType: buildin@load-target-api-config\n          env:\n            configKey: ${address.targetAPIConfigKey}\n            mefQuery: ${query}\n            mefRequestBody: ${body}\n            entity: ${entity}\n          with:\n            render: true\n          outputKey: targetApiConfig\n        - id: mapping_matrix_check_address\n          actionType: buildin@mapping-matrix-checker\n          env:\n            mappingMatrixKey: mef.sonata.api.matrix.address.validation\n            targetKey: ${address.targetAPIConfigKey}\n        - id: rewrite-path\n          actionType: buildin@rewrite-path\n          with:\n            engine: spel\n          env:\n            path: ${targetApiConfig.endpoints[0].path}\n            method: ${targetApiConfig.endpoints[0].method}\n\n        - id: modify-request-body\n          actionType: buildin@modify-request-body\n          env:\n            code: ${targetApiConfig.endpoints[0].requestBody}\n\n        - id: modify-response-body\n          actionType: buildin@modify-response-body\n          with:\n            engine: spel\n            listLoop: true\n          env:\n            code: ${targetApiConfig.endpoints[0].responseBody}\n            inputs: ${targetApiConfig.inputs}\n          postResultRender: true\n\n        - id: update-response-body\n          actionType: buildin@db\n          with:\n            action: update\n            properties:\n              - responseBody\n              - responseStatusCode\n          preRequest: false\n          postRequest: true\n          order: -4\n\n    - uri: ${env.target.url}\n      trigger:\n        path: /mefApi/sonata/geographicAddressManagement/v7/geographicAddress/**\n        method: get\n        queryParams:\n      metadata:\n        cacheRequestBody: true\n      actions:\n        - name: retrieve addressId from path\n          actionType: buildin@pattern\n          env:\n            input: ${path}\n            pattern: /mefApi/sonata/geographicAddressManagement/v7/geographicAddress/(?<segment>.*)\n\n        - id: load-downstream-api-config\n          actionType: buildin@load-target-api-config\n          env:\n            configKey: \"mef.sonata.api-target.address.retrieve\"\n            mefQuery: ${query}\n            id: ${segment}\n          with:\n            render: true\n          outputKey: targetApiConfig\n\n        - id: rewrite-path\n          actionType: buildin@rewrite-path\n          env:\n            path: ${targetApiConfig.endpoints[0].path}\n            method: ${targetApiConfig.endpoints[0].method}\n\n        - id: modify-response-body\n          actionType: buildin@modify-response-body\n          with:\n            engine: spel\n          env:\n            code: ${targetApiConfig.endpoints[0].responseBody}\n            inputs: ${targetApiConfig.inputs}\nlinks:\n  - targetAssetKey: mef.sonata.api-target.address.retrieve\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-target.address.validate\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-spec.serviceability.address\n    relationship: implementation.standard.api-spec\n  - targetAssetKey: mef.sonata.api-target-mapper.address.validate\n    relationship: implementation.target-mapper\n  - targetAssetKey: mef.sonata.api-target-mapper.address.retrieve\n    relationship: implementation.target-mapper\n\n\n\n",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.quote.eline.read.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.quote.eline.read\n  name: Quote Connection API\n  mapperKey: mef.sonata.api-target-mapper.quote.eline.read\n  version: 1\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n  trigger:\n    path: /mefApi/sonata/quoteManagement/v8/quote/{id}\n    method: get\n    productType: access_e_line\n  endpoints:\n    - id: retrieve quote for connection\n      path: \"\"\n      method: \"\"\n      requestBody: ${entity.request.quoteItem[0].product.productConfiguration.access_e_line}\n      responseBody: |\n        {\n          \"id\":\"${entity.id}\",\n          \"relatedContactInformation\":\"${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation(env.seller.role, env.seller.name, env.seller.emailAddress, env.seller.number, entity.request.relatedContactInformation)}\",\n          \"buyerRequestedQuoteLevel\":\"${entity.request.buyerRequestedQuoteLevel}\",\n          \"quoteItem\":[\n            {\n              \"product\":\"${entity.request.quoteItem[0].product}\",\n              \"state\":\"@{{quoteItem[*].state}}\",\n              \"quoteItemPrice\":{\n                \"price\":{\n                  \"dutyFreeAmount\":{\n                   \"unit\":\"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.unit}}\",\n                   \"value\":\"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.value}}\"\n                  }\n                }\n              }\n            }\n          ],\n          \"quoteDate\":\"${T(com.consoleconnect.kraken.operator.core.toolkit.DateTime).nowInUTCFormatted()}\",\n          \"externalId\":\"${entity.request[externalId]?:''}\",\n          \"instantSyncQuote\":\"${entity.request[instantSyncQuote]?:''}\",\n          \"requestedQuoteCompletionDate\":\"${entity.request[requestedQuoteCompletionDate]?:''}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.quote.uni.read.sync.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.quote.uni.read.sync\n  name: Quote Management API\n  mapperKey: mef.sonata.api-target-mapper.quote.uni.read.sync\n  version: 1\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n  trigger:\n    path: /mefApi/sonata/quoteManagement/v8/quote/{id}\n    method: get\n    productType: uni\n  endpoints:\n    - id: retrieve quote for port\n      url: ${env.target.url}\n      path:\n      method:\n      requestBody: ${entity.request.quoteItem[0].product.productConfiguration.uni}\n      responseBody: |\n        {\n          \"id\":\"${entity.id}\",\n          \"relatedContactInformation\":\"${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation(env.seller.role, env.seller.name, env.seller.emailAddress, env.seller.number, entity.request.relatedContactInformation)}\",\n          \"buyerRequestedQuoteLevel\":\"${entity.request.buyerRequestedQuoteLevel}\",\n          \"quoteItem\":[{\n             \"product\":\"${entity.request.quoteItem[0].product}\",\n             \"action\":\"${entity.request.quoteItem[0].action}\",\n             \"id\":\"${entity.request.quoteItem[0].id}\",\n             \"state\":\"${entity.renderedResponse.quoteItem[0].state}\",\n             \"quoteItemPrice\":\"${entity.renderedResponse.quoteItem[0].quoteItemPrice}\"\n           }],\n          \"quoteDate\":\"${T(com.consoleconnect.kraken.operator.core.toolkit.DateTime).nowInUTCFormatted()}\",\n          \"externalId\":\"${entity.request[externalId]?:''}\",\n          \"instantSyncQuote\":\"${entity.request[instantSyncQuote]?:''}\",\n          \"requestedQuoteCompletionDate\":\"${entity.request[requestedQuoteCompletionDate]?:''}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers-sample-data/api-target-mapper.order.uni.add.yaml": "kind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  id: e4235ae2-b7de-4ab4-9609-b320947e8f05\n  name: Mapper Of Creating Order Port\n  version: 1\n  key: mef.sonata.api-target-mapper.order.uni.add\n  description: This operation creates a ProductOrder entity\n  labels: {}\nfacets:\n  endpoints:\n    - id: create port order\n      path: /api/company/{companyName}/ports/orders\n      method: put\n      mappers:\n        request:\n          - name: mapper.order.uni.add.buyerId\n            title: >-\n              The unique identifier of the organization that is acting as the a\n              Buyer.\n            source: '@{{buyerId}}'\n            target: '@{{companyName}}'\n            description: ''\n            sourceLocation: QUERY\n            targetLocation: PATH\n            requiredMapping: false\n        response:\n          - name: mapper.order.uni.add.state\n            title: Order State\n            source: '@{{responseBody.status}}'\n            target: '@{{state}}'\n            targetType: enum\n            description: ''\n            targetValues:\n              - acknowledged\n              - assessingCancellation\n              - held.assessingCharge\n              - pending.assessingModification\n              - cancelled\n              - pendingCancellation\n              - completed\n              - failed\n              - inProgress\n              - partial\n              - rejected\n            valueMapping:\n              created: acknowledged\n            sourceLocation: BODY\n            targetLocation: BODY\n            requiredMapping: true\n          - name: mapper.order.uni.add.orderId\n            title: order Id from seller\n            source: '@{{responseBody.id}}'\n            target: '@{{orderId}}'\n            description: orderId mapping\n            sourceLocation: BODY\n            targetLocation: BODY\n            requiredMapping: true\n          - name: mapper.order.uni.add.instanceId\n            title: instance id from seller\n            source: '@{{responseBody.port.id}}'\n            target: '@{{instanceId}}'\n            description: order instanceId mapping\n            sourceLocation: BODY\n            targetLocation: BODY\n            requiredMapping: false\n      serverKey: \"\"\n  trigger:\n    path: /mefApi/sonata/productOrderingManagement/v10/productOrder\n    method: post\n    actionType: add\n    productType: uni",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.order.eline.delete.yaml": "\n---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.order.eline.delete\n  name: Order Connection API\n  mapperKey: mef.sonata.api-target-mapper.order.eline.delete\n  version: 4\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n  trigger:\n    path: /mefApi/sonata/productOrderingManagement/v10/productOrder\n    method: post\n    productType: access_e_line\n    actionType: delete\n  endpoints:\n    - id: delete connection by id\n      path: \"\"\n      method: \"\"\n      responseBody: |\n        {\n          \"id\":\"${entity.id}\",\n          \"relatedContactInformation\":\"${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation(env.seller.role, env.seller.name, env.seller.emailAddress, env.seller.number, mefRequestBody.relatedContactInformation)}\",\n          \"productOrderItem\":\"${mefRequestBody.productOrderItem}\",\n          \"state\":\"@{{state}}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/apis/api.inventory.yaml": "---\nkind: kraken.component.api\napiVersion: v1\nmetadata:\n  key: mef.sonata.api.inventory\n  name: Product Inventory Management\n  labels:\n    mef-api-release: grace\n    inventory-api-version: v7\n  version: 4\nspec:\n  supportedProductTypesAndActions:\n    - path: /mefApi/sonata/productInventory/v7/product\n      method: get\n      productTypes:\n        - UNI\n        - ACCESS_E_LINE\n    - path: /mefApi/sonata/productInventory/v7/product/{id}\n      method: get\n      productTypes:\n        - UNI\n        - ACCESS_E_LINE\n  mappings:\n    - uri: ${env.target.url}\n      trigger:\n        path: /mefApi/sonata/productInventory/v7/product\n        method: get\n      metadata:\n        cacheRequestBody: false\n      actions:\n        - id: read request payload by id\n          actionType: buildin@db\n          env:\n            id: ${query.productOrderId}\n          with:\n            action: read\n          preRequest: true\n        - id: calculate_list_type_for_via_javascript\n          actionType: engine@javascript\n          env:\n            bizType: ${entity.bizType}\n          with:\n            code: |\n              (jsonStr) => {\n                console.log(\"input: \" + jsonStr);\n                let input = JSON.parse(jsonStr);\n                let targetAPIConfigKey = '';\n                if(input.bizType == 'UNI') {\n                  targetAPIConfigKey = 'mef.sonata.api-target.inventory.uni.list';\n                } else if(input.bizType == 'ACCESS_E_LINE') {\n                  targetAPIConfigKey = 'mef.sonata.api-target.inventory.eline.list';\n                } else {\n                  targetAPIConfigKey = 'targetKey:notFound';\n                }\n                let ret = {\n                  orderType: input.bizType,\n                  targetAPIConfigKey: targetAPIConfigKey\n                };\n                return JSON.stringify(ret);\n              }\n          outputKey: order\n\n        - id: load-downstream-api-config\n          actionType: buildin@load-target-api-config\n          env:\n            configKey: ${order.targetAPIConfigKey}\n            mefQuery: ${query}\n            entity: ${entity}\n          with:\n            render: true\n            replaceStar: true\n          outputKey: targetApiConfig\n\n        - id: rewrite-path\n          actionType: buildin@rewrite-path\n          env:\n            path: ${targetApiConfig.endpoints[0].path}\n            method: ${targetApiConfig.endpoints[0].method}\n\n        - id: modify-response-body\n          actionType: buildin@modify-response-body\n          with:\n            engine: spel\n          env:\n            code: ${targetApiConfig.endpoints[0].responseBody}\n            inputs: ${targetApiConfig.inputs}\n    - uri: ${env.target.url}\n      trigger:\n        path: /mefApi/sonata/productInventory/v7/product/**\n        method: get\n        queryParams:\n      metadata:\n        cacheRequestBody: true\n      actions:\n        - name: retrieve product id from path\n          actionType: buildin@pattern\n          env:\n            input: ${path}\n            pattern: /mefApi/sonata/productInventory/v7/product/(?<segment>.*)\n        - id: calculate_type_for_via_javascript\n          actionType: engine@javascript\n          env:\n            bizType: ${query.productType}\n          with:\n            code: |\n              (jsonStr) => {\n                console.log(\"input: \" + jsonStr);\n                let input = JSON.parse(jsonStr);\n                let targetAPIConfigKey = '';\n                if(input.bizType == 'UNI') {\n                  targetAPIConfigKey = 'mef.sonata.api-target.inventory.uni.read';\n                } else if(input.bizType == 'ACCESS_E_LINE') {\n                  targetAPIConfigKey = 'mef.sonata.api-target.inventory.eline.read';\n                } else {\n                  targetAPIConfigKey = 'targetKey:notFound';\n                }\n                let ret = {\n                  orderType: input.bizType,\n                  targetAPIConfigKey: targetAPIConfigKey\n                };\n                return JSON.stringify(ret);\n              }\n          outputKey: order\n        - id: load-downstream-api-config\n          actionType: buildin@load-target-api-config\n          env:\n            configKey: ${order.targetAPIConfigKey}\n            mefQuery: ${query}\n            id: ${segment}\n          with:\n            render: true\n            replaceStar: true\n          outputKey: targetApiConfig\n\n        - id: rewrite-path\n          actionType: buildin@rewrite-path\n          env:\n            path: ${targetApiConfig.endpoints[0].path}\n            method: ${targetApiConfig.endpoints[0].method}\n\n        - id: modify-response-body\n          actionType: buildin@modify-response-body\n          with:\n            engine: spel\n          env:\n            code: ${targetApiConfig.endpoints[0].responseBody}\n            inputs: ${targetApiConfig.inputs}\n\nlinks:\n  - targetAssetKey: mef.sonata.api-target.inventory.uni.list\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-target.inventory.eline.list\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-target.inventory.eline.read\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-target.inventory.uni.read\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-target-mapper.inventory.eline.read\n    relationship: implementation.target-mapper\n  - targetAssetKey: mef.sonata.api-target-mapper.inventory.uni.read\n    relationship: implementation.target-mapper\n  - targetAssetKey: mef.sonata.api-target-mapper.inventory.eline.list\n    relationship: implementation.target-mapper\n  - targetAssetKey: mef.sonata.api-target-mapper.inventory.uni.list\n    relationship: implementation.target-mapper\n  - targetAssetKey: mef.sonata.api-spec.inventory\n    relationship: implementation.standard.api-spec\n\n\n\n\n",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.order.uni.delete.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.order.uni.delete\n  name: Order Port API\n  mapperKey: mef.sonata.api-target-mapper.order.uni.delete\n  version: 5\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n  trigger:\n    path: /mefApi/sonata/productOrderingManagement/v10/productOrder\n    method: post\n    productType: uni\n    actionType: delete\n  endpoints:\n    - id: delete port\n      path: \"\"\n      method: \"\"\n      responseBody: |\n        {\n          \"id\":\"${entity.id}\",\n          \"relatedContactInformation\":\"${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation(env.seller.role, env.seller.name, env.seller.emailAddress, env.seller.number, mefRequestBody.relatedContactInformation)}\",\n          \"productOrderItem\":\"${mefRequestBody.productOrderItem}\",\n           \"state\":\"@{{state}}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.quote.notification.state.change.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.quote.notification.state.change\n  name: Quote Notification API\n  version: 2\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n  trigger:\n    path: /mefApi/sonata/quoteNotification/v8/listener/quoteStateChangeEvent\n    method: post\n  endpoints:\n    - id: notify quote state change\n      mappers:\n        serverKey: NONE\n        path: NONE\n        method: NONE\n        request:\n          - name: order_id\n            title: order id\n            description: Please specify the field that represent the order Id from Seller API request\n            source: \"\"\n            function: \"@spelFunc.renderId(source)\"\n            sourceLocation: \"\"\n            targetLocation: \"BODY\"\n            target: \"@{{event.id}}\"\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.order.uni.delete.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.order.uni.delete\n  name: Mapper Of Deleting Order Port\n  description: This operation deletes a ProductOrder entity\n  version: 3\nspec:\n  trigger:\n    path: /mefApi/sonata/productOrderingManagement/v10/productOrder\n    method: post\n    productType: uni\n    actionType: delete\n  endpoints:\n    - id: delete port\n      path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n          - name: mapper.order.uni.delete.buyerId\n            title: \"The unique identifier of the organization that is acting as the a Buyer.\"\n            description: \"\"\n            source: \"@{{buyerId}}\"\n            sourceLocation: \"QUERY\"\n            target: \"\"\n            targetLocation: \"\"\n            requiredMapping: false\n          - name: mapper.order.uni.delete.productId\n            title: \"The unique identifier of an in-service Product that is the ordering subject\"\n            description: \"\"\n            source: \"@{{productOrderItem[*].product.id}}\"\n            sourceLocation: \"BODY\"\n            target: \"\"\n            targetLocation: \"\"\n            requiredMapping: false\n        response:\n          - name: mapper.order.uni.delete.state\n            title: \"Order State\"\n            description: \"\"\n            target: \"@{{state}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: true\n            targetValues:\n              - acknowledged\n              - assessingCancellation\n              - held.assessingCharge\n              - pending.assessingModification\n              - cancelled\n              - pendingCancellation\n              - completed\n              - failed\n              - inProgress\n              - partial\n              - rejected\n            valueMapping: {}\n            source: \"\"\n            sourceLocation: \"\"",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.inventory.eline.read.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.inventory.eline.read\n  name: Inventory Connection API\n  description: This operation retrieves a product entity\n  version: 11\nspec:\n  trigger:\n    path: /mefApi/sonata/productInventory/v7/product/{id}\n    method: get\n    productType: access_e_line\n  endpoints:\n    - id: retrieve eline product inventory detail by id\n      path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n          - name: mapper.product.inventory.id\n            title: Identifier of the Product\n            description: \"\"\n            source: \"@{{id}}\"\n            sourceLocation: \"PATH\"\n            target: \"\"\n            targetLocation: \"\"\n            requiredMapping: true\n          - name: mapper.inventory.eline.read.buyerId\n            title: \"The unique identifier of the organization that is acting as the a Buyer\"\n            source: \"@{{buyerId}}\"\n            sourceLocation: \"QUERY\"\n            target: \"\"\n            targetType: string\n            targetLocation: \"\"\n            requiredMapping: false\n        response:\n          - name: mapper.product.inventory.read.status\n            title:  the status of a MEF product\n            description: \"\"\n            target: \"@{{status}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: true\n            targetValues:\n              - active\n              - active.pendingChange\n              - cancelled\n              - pendingActive\n              - pendingTerminate\n              - suspended\n              - suspendedPendingTerminate\n              - terminated\n            valueMapping: {}\n            source: \"\"\n            sourceLocation: \"\"\n          - name: mapper.product.inventory.read.startDate\n            title: The date from which the product starts\n            description: \"\"\n            target: \"@{{startDate}}\"\n            targetLocation: BODY\n            requiredMapping: true\n            source: \"\"\n            sourceLocation: \"\"\n",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.quote.eline.add.sync.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.quote.eline.add.sync\n  name: Quote Connection API\n  mapperKey: mef.sonata.api-target-mapper.quote.eline.add.sync\n  version: 1\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n  trigger:\n    path: /mefApi/sonata/quoteManagement/v8/quote\n    method: post\n    productType: access_e_line\n    actionType: add\n  endpoints:\n    - id: create quote for connection\n      path:\n      method:\n      requestBody: ${mefRequestBody.quoteItem[0].product.productConfiguration.access_e_line}\n      responseBody: |\n        {\n          \"id\":\"${entity.id}\",\n          \"relatedContactInformation\":\"${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation(env.seller.role, env.seller.name, env.seller.emailAddress, env.seller.number, mefRequestBody.relatedContactInformation)}\",\n          \"buyerRequestedQuoteLevel\":\"${mefRequestBody.buyerRequestedQuoteLevel}\",\n          \"quoteItem\":[{\n             \"product\":\"${mefRequestBody.quoteItem[0].product}\",\n             \"action\":\"add\",\n             \"id\":\"${mefRequestBody.quoteItem[0].id}\",\n             \"state\":\"((mefResponseBody.quoteItem[0].quoteItemPrice[0].price.dutyFreeAmount.value == '' ? 'unableToProvide': 'approved.orderable'))\",\n             \"quoteItemPrice\":[{\n               \"unitOfMeasure\":\"@{{quoteItem.quoteItemPrice.unitOfMeasure}}\",\n               \"price\":{\n                 \"dutyFreeAmount\":{\n                   \"unit\":\"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.unit}}\",\n                   \"value\":\"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.value}}\"\n                 },\n                 \"taxRate\":\"@{{}}\",\n                 \"taxIncludedAmount\":{\n                   \"unit\":\"@{{quoteItem.quoteItemPrice.price.taxIncludedAmount.unit}}\",\n                   \"value\":\"@{{quoteItem.quoteItemPrice.price.taxIncludedAmount.value}}\"\n                 }\n               },\n               \"name\":\"@{{quoteItem.quoteItemPrice.name}}\",\n               \"priceType\":\"@{{quoteItem.quoteItemPrice.priceType}}\",\n               \"description\":\"@{{quoteItem.quoteItemPrice.description}}\",\n               \"recurringChargePeriod\":\"@{{quoteItem.quoteItemPrice.recurringChargePeriod}}\"\n             }]\n          }],\n          \"quoteDate\":\"${T(com.consoleconnect.kraken.operator.core.toolkit.DateTime).nowInUTCFormatted()}\",\n          \"externalId\":\"${mefRequestBody[externalId]?:''}\",\n          \"instantSyncQuote\":\"${mefRequestBody[instantSyncQuote]?:''}\",\n          \"requestedQuoteCompletionDate\":\"${mefRequestBody[requestedQuoteCompletionDate]?:''}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-specs/api-spec.address.yaml": "---\nkind: kraken.component.api-spec\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-spec.serviceability.address\n  name: Geographic Address Management\n  icon: https://storage.googleapis.com/console-connect-static-assets/krakenUI/address-validation.png\n  labels:\n    mef-api-release: grace\n    address-api-version: v7\n  version: 1\nspec:\n  baseSpec:\n    path: classpath:/mef-sonata/openapi/geographicAddressManagement.api.yaml\n  customizedSpec:\n    path: classpath:/mef-sonata/openapi/geographicAddressManagement.api.customized.yaml\n",
        "memory:console-core/mef-lso-sonata-api/mapping-matrix/mapping.matrix.quote.yaml": "---\nkind: kraken.product.mapping.matrix\napiVersion: v1\nmetadata:\n  key: mef.sonata.api.matrix.quote\n  name: MEF Sonata API\n  labels:\n    mef-api-release: grace\n  version: 12\nspec:\n  matrix:\n    mef.sonata.api-target.quote.uni.add:\n      - name: enabled\n        expected: false\n      - name: product_type_UNI\n        path: \"$.body.quoteItem[*].product.productConfiguration.['@type']\"\n        expected: UNI\n      - name: action_add\n        path: \"$.body.quoteItem[*].['action']\"\n        expected: add\n      - name: syn_mode_false\n        path: \"$.body.instantSyncQuote\"\n        expected: false\n      - name: buyer.requested.quote.level.firm\n        path: \"$.body.buyerRequestedQuoteLevel\"\n        expected: firm\n    mef.sonata.api-target.quote.eline.add:\n      - name: enabled\n        expected: false\n      - name: product_type_eline\n        path: \"$.body.quoteItem[*].product.productConfiguration.['@type']\"\n        expected: ACCESS_E_LINE\n      - name: action_add\n        path: \"$.body.quoteItem[*].['action']\"\n        expected: add\n      - name: syn_mode_false\n        path: \"$.body.instantSyncQuote\"\n        expected: false\n      - name: buyer.requested.quote.level.firm\n        path: \"$.body.buyerRequestedQuoteLevel\"\n        expected: firm\n    mef.sonata.api-target.quote.uni.add.sync:\n      - name: product_type_UNI\n        path: \"$.body.quoteItem[*].product.productConfiguration.['@type']\"\n        expected: UNI\n      - name: action_add\n        path: \"$.body.quoteItem[*].['action']\"\n        expected: add\n      - name: syn_mode_true\n        path: \"$.body.instantSyncQuote\"\n        expected: true\n      - name: buyer.requested.quote.level.firm\n        path: \"$.body.buyerRequestedQuoteLevel\"\n        expected: firm\n    mef.sonata.api-target.quote.eline.add.sync:\n      - name: product_type_eline\n        path: \"$.body.quoteItem[*].product.productConfiguration.['@type']\"\n        expected: ACCESS_E_LINE\n      - name: action_add\n        path: \"$.body.quoteItem[*].['action']\"\n        expected: add\n      - name: syn_mode_true\n        path: \"$.body.instantSyncQuote\"\n        expected: true\n      - name: buyer.requested.quote.level.firm\n        path: \"$.body.buyerRequestedQuoteLevel\"\n        expected: firm\n\n\n",
        "memory:console-core/mef-lso-sonata-api/api-specs/api-spec.order.yaml": "---\nkind: kraken.component.api-spec\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-spec.order\n  name: Product Ordering Management\n  icon: https://storage.googleapis.com/console-connect-static-assets/krakenUI/order.png\n  labels:\n    mef-api-release: grace\n    order-api-version: v10\n  version: 1\nspec:\n  baseSpec:\n    path: classpath:/mef-sonata/openapi/productOrderManagement.api.yaml\n  customizedSpec:\n    path: classpath:/mef-sonata/openapi/productOrderManagement.api.customized.yaml\n\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.quote.eline.add.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.quote.eline.add\n  name: Mapper Of Creating Quote Eline\n  description: This operation creates a Quote entity\n  version: 4\nspec:\n  trigger:\n    path: /mefApi/sonata/quoteManagement/v8/quote\n    method: post\n    productType: access_e_line\n    actionType: add\n    quoteLevel: firm\n    syncMode: false\n  endpoints:\n    - id: create quote for connection\n      path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n        response:\n          - name: quote.eline.add.state.mapper\n            title: Quote State Mapping\n            description: quote state mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{quoteItem[*].state}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: true\n            targetValues:\n              - accepted\n              - acknowledged\n              - answered\n              - approved.orderable\n              - approved.orderableAlternate\n              - cancelled\n              - unableToProvide\n              - declined\n              - expired\n              - inProgress\n              - inProgress.draft\n              - rejected\n            valueMapping: {}\n          - name: quote.eline.add.price.value.mapper\n            title: Quote Price Value Mapping\n            description: quote price value mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.value}}\"\n            targetLocation: BODY\n            requiredMapping: true\n          - name: quote.eline.add.price.unit.mapper\n            title: Quote Price Unit Mapping\n            description: quote price unit mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.unit}}\"\n            targetLocation: BODY\n            requiredMapping: true\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.address.retrieve.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.address.retrieve\n  name: Mapper Of Retrieving Geographic Address(v8)\n  description: This operation retrieves a GeographicAddress entity\n  version: 8\nspec:\n  trigger:\n    path: /mefApi/sonata/geographicAddressManagement/v7/geographicAddress/{id}\n    method: get\n    addressType: FieldedAddress\n  endpoints:\n    - id: retrieve address\n      path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n          - name: mapper.address.retrieve.id\n            title: \"Identifier of the GeographicAddress\"\n            description: \"\"\n            source: \"@{{id}}\"\n            sourceLocation: \"PATH\"\n            target: \"\"\n            targetLocation: \"\"\n            requiredMapping: true\n        response:\n          - name: mapper.address.validation.id\n            title: \"Identifier of the GeographicAddress\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{id}}\"\n            targetType: string\n            targetLocation: BODY\n            requiredMapping: true\n          - name: mapper.address.validation.country\n            title: \"The country of the Geographic Address\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{associatedGeographicAddress.country}}\"\n            targetType: string\n            targetLocation: BODY\n            requiredMapping: false\n          - name: mapper.address.validation.city\n            title: \"The city of the Geographic Address\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{associatedGeographicAddress.city}}\"\n            targetType: string\n            targetLocation: BODY\n            requiredMapping: false\n          - name: mapper.address.validation.streetName\n            title: \"The street of the Geographic Address\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{associatedGeographicAddress.streetName}}\"\n            targetType: string\n            targetLocation: BODY\n            requiredMapping: false\n          - name: address.validation.metroId.mapper\n            title: \"The metroId of the identified alternate Geographic Address\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{alternateGeographicAddress.metroId}}\"\n            targetType: string\n            targetLocation: BODY\n            requiredMapping: false\n            replaceStar: false\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.product.offering.eline.read.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.poq.eline.read\n  name: Product Offering Qualification (POQ) API\n  description: |\n    The Buyer requests a list of POQs from the Seller based on a set of POQ\n    filter criteria (as described in MEF79). For each POQ returned, the\n    Seller also provides a POQ Identifier that uniquely identifies this POQ\n    within the Seller's system. The order of the elements returned to the\n    Buyer is defined by the Seller (e.g. natural order) and does not change\n    between the pages. If criteria for attribute X are provided, all\n    returned items must match it.\nspec:\n  trigger:\n    path: /mefApi/sonata/productOfferingQualification/v7/productOfferingQualification/{id}\n    method: get\n    productType: access_e_line\n  endpoints:\n    - id: Retrieves a product offering qualification by id for connection\n      path: \"\"\n      method: \"\"\n      mappers:\n        request:\n        response:\n          - name: mapper.poq.eline.read.itemState\n            title: POQ Item State Mapping\n            description: POQ Item state mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{itemState}}\"\n            targetType: enum\n            targetLocation: BODY\n            targetValues:\n              - acknowledged\n              - done.ready\n              - done.abandoned\n              - terminatedWithError\n              - approved.orderableAlternate\n              - inProgress\n            valueMapping: {}\n            defaultValue: \"done.ready\"\n            requiredMapping: false\n          - name: mapper.poq.eline.read.state\n            title: POQ State Mapping\n            description: quote state mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{state}}\"\n            targetType: enum\n            targetLocation: BODY\n            targetValues:\n              - acknowledged\n              - done.ready\n              - done.unableToProvide\n              - terminatedWithError\n              - approved.orderableAlternate\n              - inProgress\n            valueMapping: {}\n            defaultValue: \"done.ready\"\n            requiredMapping: false\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.order.uni.add.yaml": "\n---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.order.uni.add\n  name: Mapper Of Creating Order Port\n  description: This operation creates a ProductOrder entity\n  version: 3\nspec:\n  trigger:\n    path: /mefApi/sonata/productOrderingManagement/v10/productOrder\n    method: post\n    productType: uni\n    actionType: add\n  endpoints:\n    - id: create port order\n      path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n          - name: mapper.order.uni.add.buyerId\n            title: \"The unique identifier of the organization that is acting as the a Buyer.\"\n            description: \"\"\n            source: \"@{{buyerId}}\"\n            sourceLocation: \"QUERY\"\n            target: \"\"\n            targetLocation: \"\"\n            requiredMapping: false\n        response:\n          - name: mapper.order.uni.add.state\n            title: \"Order State\"\n            description: \"\"\n            target: \"@{{state}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: true\n            targetValues:\n              - acknowledged\n              - assessingCancellation\n              - held.assessingCharge\n              - pending.assessingModification\n              - cancelled\n              - pendingCancellation\n              - completed\n              - failed\n              - inProgress\n              - partial\n              - rejected\n            valueMapping: {}\n            source: \"\"\n            sourceLocation: BODY\n          - name: mapper.order.uni.add.orderId\n            title: \"order Id from seller\"\n            description: orderId mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{orderId}}\"\n            targetLocation: BODY\n            requiredMapping: true\n          - name: mapper.order.uni.add.instanceId\n            title: \"instance id from seller\"\n            description: order instanceId mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{instanceId}}\"\n            targetLocation: \"BODY\"\n            requiredMapping: false\n",
        "memory:console-core/mef-lso-sonata-api/product.yaml": "---\nkind: kraken.product\napiVersion: v1\nmetadata:\n  key: mef.sonata\n  name: MEF Sonata API\n  labels:\n    mef-api-release: grace\n  version: 3\nspec:\n  componentPaths:\n    - memory:console-core/mef-lso-sonata-api/apis/api.order.yaml\n\n  templateUpgradePaths:\n    - memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.address.retrieve.yaml\n  sampleMapperDataPaths:\n    - memory:console-core/mef-lso-sonata-api/api-targets-mappers-sample-data/api-target-mapper.order.uni.add.yaml\n\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.address.validate.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.address.validate\n  name: Mapper Of Validating Geographic Address\n  description: This operation creates a GeographicAddressValidation entity\n  version: 8\nspec:\n  trigger:\n    path: /mefApi/sonata/geographicAddressManagement/v7/geographicAddressValidation\n    method: post\n    provideAlternative: false\n    addressType: FieldedAddress\n  endpoints:\n    - id: validate address\n      path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n          - name: address.validation.city\n            title: \"The city that the address is in\"\n            description: \"\"\n            source: \"@{{submittedGeographicAddress.city}}\"\n            sourceLocation: BODY\n            requiredMapping: true\n            target: \"\"\n            targetLocation: \"\"\n          - name: address.validation.country\n            title: \"The country that the address is in\"\n            description: \"\"\n            source: \"@{{submittedGeographicAddress.country}}\"\n            sourceLocation: BODY\n            requiredMapping: true\n            target: \"\"\n            targetLocation: \"\"\n          - name: address.validation.streetName\n            title: \"Name of the street or other street type\"\n            description: \"\"\n            source: \"@{{submittedGeographicAddress.streetName}}\"\n            sourceLocation: BODY\n            requiredMapping: false\n            target: \"\"\n            targetLocation: \"\"\n        response:\n          - name: mapper.address.validation.id\n            title: \"Unique identifier of the identified alternate Geographic Address\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"BODY\"\n            target: \"@{{alternateGeographicAddress[*].id}}\"\n            targetType: string\n            targetLocation: BODY\n            requiredMapping: true\n            replaceStar: false\n          - name: address.validation.country.mapper\n            title: \"The country of the identified alternate Geographic Address\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"BODY\"\n            target: \"@{{alternateGeographicAddress[*].country}}\"\n            targetType: string\n            targetLocation: BODY\n            requiredMapping: false\n            replaceStar: false\n          - name: address.validation.city.mapper\n            title: \"The city of the identified alternate Geographic Address\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"BODY\"\n            target: \"@{{alternateGeographicAddress[*].city}}\"\n            targetType: string\n            targetLocation: BODY\n            requiredMapping: false\n            replaceStar: false\n          - name: address.validation.address.mapper\n            title: \"The street of the identified alternate Geographic Address\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{alternateGeographicAddress[*].streetName}}\"\n            targetType: string\n            targetLocation: BODY\n            requiredMapping: false\n            replaceStar: false\n          - name: address.validation.metroId.mapper\n            title: \"The metroId of the identified alternate Geographic Address\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{alternateGeographicAddress[*].metroId}}\"\n            targetType: string\n            targetLocation: BODY\n            requiredMapping: false\n            replaceStar: false\n          - name: address.validation.bestMatch.id.mapper\n            title: \"Unique identifier of the identified best match Address\"\n            requiredMapping: false\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{bestMatchGeographicAddress.id}}\"\n            targetType: string\n            targetLocation: BODY\n            checkPath: \"$.bestMatchGeographicAddress.id\"\n            deletePath: \"$.bestMatchGeographicAddress\"\n            replaceStar: false\n          - name: address.validation.bestMatch.city.mapper\n            title: \"The City of the identified best match Address\"\n            requiredMapping: false\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{bestMatchGeographicAddress.city}}\"\n            targetType: string\n            targetLocation: BODY\n            replaceStar: false\n          - name: address.validation.bestMatch.country.mapper\n            title: \"The Country of the identified best match Address\"\n            requiredMapping: false\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{bestMatchGeographicAddress.country}}\"\n            targetType: string\n            targetLocation: BODY\n            replaceStar: false\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.inventory.eline.list.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.inventory.eline.list\n  name: Inventory Connection API\n  version: 2\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n  trigger:\n    path: /mefApi/sonata/productInventory/v7/product\n    method: get\n    productType: access_e_line\n  endpoints:\n    - id: list eline product\n      path: \"\"\n      method: \"\"\n      mappers:\n        request:\n          - name: mapper.inventory.eline.list.buyerId\n            title: \"The unique identifier of the organization that is acting as the a Buyer. MUST be specified in the request only when the requester represents more than one Buyer.\"\n            source: \"@{{buyerId}}\"\n            sourceLocation: \"QUERY\"\n            target: \"\"\n            targetType: string\n            targetLocation: \"\"\n            requiredMapping: false\n        response:\n          - name: mapper.inventory.eline.list.id\n            title: \"Unique identifier of the product\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{id}}\"\n            targetType: string\n            targetLocation: BODY\n            requiredMapping: true\n            checkPath: \"$[0].id\"\n            deletePath: \"$[*]\"\n          - name:  mapper.inventory.eline.list.startDate\n            title: \"The date from which the product starts\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{startDate}}\"\n            targetType: string\n            targetLocation: BODY\n            requiredMapping: true\n          - name: mapper.inventory.eline.list.status\n            title: \"Possible values for the status of a MEF product\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{[*].status}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: true\n            targetValues:\n              - active\n              - active.pendingChange\n              - cancelled\n              - pendingActive\n              - pendingTerminate\n              - suspended\n              - suspendedPendingTerminate\n              - terminated\n            valueMappings: {}\n",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.address.retrieve.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.address.retrieve\n  name: Geographic Address Management\n  mapperKey: mef.sonata.api-target-mapper.address.retrieve\n  version: 5\nspec:\n  inputs:\n    - mefQuery\n  trigger:\n    path: /mefApi/sonata/geographicAddressManagement/v7/geographicAddress/{id}\n    method: get\n  endpoints:\n    - id: retrieve address\n      path: \"\"\n      method: \"\"\n      requestBody:\n      responseBody: |\n        {\n          \"id\":\"@{{id}}\",\n          \"type\":\"FieldedAddress\",\n          \"country\":\"@{{associatedGeographicAddress.country}}\",\n          \"city\":\"@{{associatedGeographicAddress.city}}\",\n          \"streetName\":\"@{{associatedGeographicAddress.streetName}}\",\n          \"metroId\":\"@{{alternateGeographicAddress.metroId}}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.inventory.uni.read.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.inventory.uni.read\n  mapperKey: mef.sonata.api-target-mapper.inventory.uni.read\n  name: Product Inventory UNI\n  version: 7\nspec:\n  inputs:\n    - mefQuery\n  trigger:\n    path: /mefApi/sonata/productInventory/v7/product/{id}\n    method: get\n    productType: uni\n  endpoints:\n    - id: Retrieves a product by ID\n      path: \"\"\n      method: \"\"\n      responseBody: |\n        { \n          \"id\":\"${segment}\",\n          \"startDate\":\"@{{startDate}}\",\n           \"status\":\"@{{status}}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.order.eline.read.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.order.eline.read\n  name:  Mapper Of Reading Order Connection\n  description: This operation retrieves a ProductOrder entity\n  version: 3\nspec:\n  trigger:\n    path: /mefApi/sonata/productOrderingManagement/v10/productOrder/{id}\n    method: get\n    productType: access_e_line\n  endpoints:\n    - path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n          - name: mapper.order.eline.read.buyerId\n            title: \"The unique identifier of the organization that is acting as the a Buyer.\"\n            description: \"\"\n            source: \"@{{buyerId}}\"\n            sourceLocation: \"QUERY\"\n            target: \"\"\n            targetLocation: \"\"\n            requiredMapping: false\n        response:\n          - name: mapper.order.eline.read.state\n            title: \"ProductOrderState\"\n            description: \"\"\n            target: \"@{{state}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: true\n            targetValues:\n              - acknowledged\n              - assessingCancellation\n              - held.assessingCharge\n              - pending.assessingModification\n              - cancelled\n              - pendingCancellation\n              - completed\n              - failed\n              - inProgress\n              - partial\n              - rejected\n            valueMapping: {}\n            source: \"\"\n            sourceLocation: \"\"\n          - name: mapper.order.eline.read.instanceId\n            title: \"instance id from seller\"\n            description: \"\"\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{instanceId}}\"\n            targetLocation: \"BODY\"\n            requiredMapping: false",
        "memory:console-core/mef-lso-sonata-api/api-specs/api-spec.product.offering.yaml": "---\nkind: kraken.component.api-spec\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-spec.product.offering.qualification\n  name: Product Offering Qualification Management\n  icon: https://storage.googleapis.com/console-connect-static-assets/krakenUI/product-offering-quality.png\n  labels:\n    mef-api-release: grace\n    poq-api-version: v7\nspec:\n  baseSpec:\n    path: classpath:/mef-sonata/openapi/productOfferingQualificationManagement.api.yaml\n",
        "memory:console-core/mef-lso-sonata-api/apis/api.product.offering.yaml": "---\nkind: kraken.component.api\napiVersion: v1\nmetadata:\n  key: mef.sonata.api.poq\n  name: Product Offering Qualification (POQ) API Management\n  labels:\n    mef-api-release: grace\n    poq-api-version: v7\n  version: 3\nspec:\n  supportedProductTypesAndActions:\n    - path: /mefApi/sonata/productOfferingQualification/v7/productOfferingQualification\n      method: post\n      actionTypes:\n        - add\n      productTypes:\n        - UNI\n        - ACCESS_E_LINE\n    - path: /mefApi/sonata/productOfferingQualification/v7/productOfferingQualification/{id}\n      method: get\n      productTypes:\n        - UNI\n        - ACCESS_E_LINE\n  mappings:\n    - uri: ${env.target.url}\n      trigger:\n        path: /mefApi/sonata/productOfferingQualification/v7/productOfferingQualification\n        method: post\n      metadata:\n        cacheRequestBody: true\n      actions:\n        - id: calculate_poq_order_type_and_action_via_javascript\n          actionType: engine@javascript\n          env:\n            productOfferingQualificationItem: ${body['productOfferingQualificationItem'][0]}\n          with:\n            code: |\n              (jsonStr) => {\n                console.log(\"input: \" + jsonStr);\n                let input = JSON.parse(jsonStr);\n                let targetAPIConfigKey = '';\n                if(input.productOfferingQualificationItem['product']['productConfiguration']['@type'] == 'UNI') {\n                  targetAPIConfigKey = 'mef.sonata.api-target.poq.uni.add';\n                } else if(input.productOfferingQualificationItem['product']['productConfiguration']['@type'] == 'ACCESS_E_LINE') {\n                  targetAPIConfigKey = 'mef.sonata.api-target.poq.eline.add';\n                } else {\n                  targetAPIConfigKey = 'targetKey:notFound';\n                }\n                let ret = {\n                  productOfferingType: input.productOfferingQualificationItem['product']['productConfiguration']['@type'],\n                  targetAPIConfigKey: targetAPIConfigKey\n                };\n                return JSON.stringify(ret);\n              }\n          outputKey: productOfferingQualification\n\n        - id: persist_http_request\n          actionType: buildin@db\n          env:\n            bizType: ${productOfferingQualification.productOfferingType}\n          with:\n            action: create\n            properties:\n              - headers\n              - queryParameters\n              - requestBody\n          preRequest: true\n\n        - id: load-downstream-api-config\n          actionType: buildin@load-target-api-config\n          env:\n            configKey: ${productOfferingQualification.targetAPIConfigKey}\n            mefQuery: ${query}\n            mefRequestBody: ${body}\n            entity: ${entity}\n          with:\n            render: true\n          outputKey: targetApiConfig\n\n        - id: rewrite-path\n          actionType: buildin@rewrite-path\n          env:\n            path: ${targetApiConfig.endpoints[0].path}\n            method: ${targetApiConfig.endpoints[0].method}\n\n        - id: modify-request-body-for-poq-add\n          actionType: buildin@modify-request-body\n          env:\n            code: ${targetApiConfig.endpoints[0].requestBody}\n\n        - id: modify-response-body-for-poq-add\n          actionType: buildin@modify-response-body\n          with:\n            engine: spel\n            successStatus: 201\n          env:\n            code: ${targetApiConfig.endpoints[0].responseBody}\n            inputs: ${targetApiConfig.inputs}\n            mefRequestBody: ${body}\n\n        - actionType: buildin@db\n          with:\n            action: update\n            properties:\n              - responseBody\n              - responseStatusCode\n          preRequest: false\n          postRequest: true\n          order: -4\n\n    - uri: ${env.target.url}\n      trigger:\n        path: /mefApi/sonata/productOfferingQualification/v7/productOfferingQualification/**\n        method: get\n      metadata:\n        cacheRequestBody: false\n      actions:\n        - name: retrieve productOfferingQualification Identifier from path\n          actionType: buildin@pattern\n          env:\n            input: ${path}\n            pattern: /mefApi/sonata/productOfferingQualification/v7/productOfferingQualification/(?<segment>.*)\n\n        - id: read request payload by id\n          actionType: buildin@db\n          env:\n            id: ${segment}\n          with:\n            action: read\n          preRequest: true\n\n        - id: calculate_product_offering_type_read_via_javascript\n          actionType: engine@javascript\n          env:\n            bizType: ${entity.bizType}\n          with:\n            code: |\n              (jsonStr) => {\n                console.log(\"input: \" + jsonStr);\n                let input = JSON.parse(jsonStr);\n                let targetAPIConfigKey = '';\n                if(input.bizType == 'UNI') {\n                  targetAPIConfigKey = 'mef.sonata.api-target.poq.uni.read';\n                } else if(input.bizType == 'ACCESS_E_LINE') {\n                  targetAPIConfigKey = 'mef.sonata.api-target.poq.eline.read';\n                } else {\n                  targetAPIConfigKey = 'notImplemented';\n                }\n                let ret = {\n                  productOfferingType: input.bizType,\n                  targetAPIConfigKey: targetAPIConfigKey\n                };\n                return JSON.stringify(ret);\n              }\n          outputKey: productOfferingQualification\n\n        - id: load-downstream-api-config\n          actionType: buildin@load-target-api-config\n          env:\n            configKey: ${productOfferingQualification.targetAPIConfigKey}\n            mefQuery: ${query}\n            entity: ${entity}\n          with:\n            render: true\n          outputKey: targetApiConfig\n\n        - id: rewrite-path\n          actionType: buildin@rewrite-path\n          env:\n            path: ${targetApiConfig.endpoints[0].path}\n            method: ${targetApiConfig.endpoints[0].method}\n\n        - id: modify-request-body\n          actionType: buildin@modify-request-body\n          env:\n            code: ${targetApiConfig.endpoints[0].requestBody}\n\n        - id: modify-response-body\n          actionType: buildin@modify-response-body\n          with:\n            engine: spel\n          env:\n            code: ${targetApiConfig.endpoints[0].responseBody}\n            inputs: ${targetApiConfig.inputs}\n\n    - trigger:\n        path: /mefApi/sonata/productOfferingQualification/v7/productOfferingQualification/hub\n        method: post\n      metadata:\n        cacheRequestBody: true\n      actions:\n\n        - id: calculate_poq_event_types_via_javascript\n          actionType: engine@javascript\n          env:\n            query: ${body.query}\n          with:\n            code: |\n              (jsonStr) => {\n                console.log(\"input: \" + jsonStr);\n                let input = JSON.parse(jsonStr);\n                let query = input.query;\n                let arr = query.split(\"=\");\n                let eventArr = arr[1].split(\",\");\n                let ret = {\n                  \"eventTypes\":eventArr,\n                  \"targetAPIConfigKey\":\"mef.sonata.api-target.hub.add\"\n                };\n                return JSON.stringify(ret);\n              }\n          outputKey: event\n        - id: register-poq-event\n          actionType: buildin@register-event\n          env:\n            eventTypes: ${event.eventTypes}\n          with:\n            action: register\n\n        - id: load-downstream-api-config\n          actionType: buildin@load-target-api-config\n          env:\n            configKey: ${event.targetAPIConfigKey}\n            mefRequestBody: ${body}\n            entity: ${entity}\n          with:\n            render: true\n          outputKey: targetApiConfig\n\n        - id: mock-response\n          actionType: buildin@mock-response\n\n        - id: modify-response-body\n          actionType: buildin@modify-response-body\n          with:\n            engine: spel\n          env:\n            code: ${targetApiConfig.endpoints[0].responseBody}\n            inputs: ${targetApiConfig.inputs}\nlinks:\n  - targetAssetKey: mef.sonata.api-target.poq.eline.add\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-target.poq.eline.read\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-target.poq.uni.add\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-target.poq.uni.read\n    relationship: implementation.target\n  - targetAssetKey: mef.sonata.api-target-mapper.poq.eline.add\n    relationship: implementation.target-mapper\n  - targetAssetKey: mef.sonata.api-target-mapper.poq.eline.read\n    relationship: implementation.target-mapper\n  - targetAssetKey: mef.sonata.api-target-mapper.poq.uni.add\n    relationship: implementation.target-mapper\n  - targetAssetKey: mef.sonata.api-target-mapper.poq.uni.read\n    relationship: implementation.target-mapper\n  - targetAssetKey: mef.sonata.api-spec.product.offering.qualification\n    relationship: implementation.standard.api-spec",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.quote.uni.add.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.quote.uni.add\n  name: Quote Management API\n  mapperKey: mef.sonata.api-target-mapper.quote.uni.add\n  version: 1\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n  trigger:\n    path: /mefApi/sonata/quoteManagement/v8/quote\n    method: post\n    productType: uni\n    actionType: add\n  endpoints:\n    - id: create quote for port\n      path: \"\"\n      method: \"\"\n      requestBody: ${mefRequestBody.quoteItem[0].product.productConfiguration.uni}\n      responseBody: |\n        {\n          \"id\":\"${entity.id}\",\n          \"buyerRequestedQuoteLevel\":\"${mefRequestBody.buyerRequestedQuoteLevel}\",\n          \"relatedContactInformation\":\"${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation(env.seller.role, env.seller.name, env.seller.emailAddress, env.seller.number, mefRequestBody.relatedContactInformation)}\",\n          \"quoteItem\":[\n            {\n              \"product\":\"${mefRequestBody.quoteItem[0].product}\",\n              \"state\":\"@{{quoteItem[*].state}}\",\n              \"quoteItemPrice\":{\n                \"price\":{\n                  \"dutyFreeAmount\":{\n                    \"unit\":\"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.unit}}\",\n                    \"value\":\"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.value}}\"\n                  }\n                }\n              }\n            }\n          ],\n          \"quoteDate\":\"${T(com.consoleconnect.kraken.operator.core.toolkit.DateTime).nowInUTCFormatted()}\",\n          \"externalId\":\"${mefRequestBody[externalId]?:''}\",\n          \"instantSyncQuote\":\"${mefRequestBody[instantSyncQuote]?:''}\",\n          \"requestedQuoteCompletionDate\":\"${mefRequestBody[requestedQuoteCompletionDate]?:''}\"\n        }\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.quote.uni.add.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.quote.uni.add\n  name: Mapper Of Creating Quote UNI\n  description: This operation creates a Quote entity\n  version: 5\nspec:\n  trigger:\n    path: /mefApi/sonata/quoteManagement/v8/quote\n    method: post\n    productType: uni\n    actionType: add\n    quoteLevel: firm\n    syncMode: false\n  endpoints:\n    - id: create quote for port\n      path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n        response:\n          - name: mapper.quote.uni.add.state\n            title: Quote State Mapping\n            description: quote state mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{quoteItem[*].state}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: true\n            targetValues:\n              - accepted\n              - acknowledged\n              - answered\n              - approved.orderable\n              - approved.orderableAlternate\n              - inProgress\n              - inProgress.draft\n              - abandoned\n              - rejected\n              - unableToProvide\n            valueMapping: {}\n          - name: mapper.quote.uni.add.price.value\n            title: Quote Price Value Mapping\n            description: quote price mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.value}}\"\n            targetLocation: BODY\n            requiredMapping: true\n          - name: mapper.quote.uni.add.price.unit\n            title: Quote Price Unit Mapping\n            description: quote price mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.unit}}\"\n            targetLocation: BODY\n            requiredMapping: true\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.order.eline.delete.yaml": "\n---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.order.eline.delete\n  name:  Mapper Of Deleting Order Connection\n  description: This operation deletes a ProductOrder entity\n  version: 3\nspec:\n  trigger:\n    path: /mefApi/sonata/productOrderingManagement/v10/productOrder\n    method: post\n    productType: access_e_line\n    actionType: delete\n  endpoints:\n    - id: delete connection by id\n      path: \"\"\n      method: \"\"\n      serverKey: \"\"\n      mappers:\n        request:\n          - name: mapper.order.eline.delete.buyerId\n            title: \"The unique identifier of the organization that is acting as the a Buyer.\"\n            description: \"\"\n            source: \"@{{buyerId}}\"\n            sourceLocation: \"QUERY\"\n            target: \"\"\n            targetLocation: \"\"\n            requiredMapping: false\n          - name: mapper.order.eline.delete.productId\n            title: \"The unique identifier of an in-service Product that is the ordering subject\"\n            description: \"\"\n            source: \"@{{productOrderItem[*].product.id}}\"\n            sourceLocation: \"BODY\"\n            target: \"\"\n            targetLocation: \"\"\n            requiredMapping: false\n        response:\n          - name: mapper.order.eline.delete.state\n            title: \"Order State\"\n            description: \"\"\n            target: \"@{{state}}\"\n            targetType: enum\n            targetLocation: BODY\n            requiredMapping: true\n            targetValues:\n              - acknowledged\n              - assessingCancellation\n              - held.assessingCharge\n              - pending.assessingModification\n              - cancelled\n              - pendingCancellation\n              - completed\n              - failed\n              - inProgress\n              - partial\n              - rejected\n            valueMapping: {}\n            source: \"\"\n            sourceLocation: \"\"",
        "memory:console-core/mef-lso-sonata-api/api-specs/api-spec.quote.yaml": "---\nkind: kraken.component.api-spec\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-spec.quote\n  name: Product Quote Management\n  icon: https://storage.googleapis.com/console-connect-static-assets/krakenUI/quote.png\n  labels:\n    mef-api-release: grace\n    quote-api-version: v8\n  version: 1\nspec:\n  baseSpec:\n    path: classpath:/mef-sonata/openapi/quoteManagement.api.yaml\n  customizedSpec:\n    path: classpath:/mef-sonata/openapi/quoteManagement.api.customized.yaml\n",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.quote.notification.state.change.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.quote.notification.state.change\n  name: Order Connection API\n  mapperKey: mef.sonata.api-target-mapper.quote.notification.state.change\n  version: 1\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n    - entity\n    - eventEntity\n  trigger:\n    path: /mefApi/sonata/quoteNotification/v8/listener/quoteStateChangeEvent\n    method: post\n  endpoints:\n    - id: notify quote state change\n      path: \"/mefApi/sonata/quoteNotification/v8/listener/quoteStateChangeEvent\"\n      url: \"${eventEntity.registerInfo.callback}\"\n#      path: \"/anything\"\n      method: post\n      requestBody: |\n        {\n          \"eventId\":\"${eventEntity.id}\",\n          \"eventTime\":\"${T(com.consoleconnect.kraken.operator.core.toolkit.DateTime).nowInUTCFormatted()}\",\n          \"eventType\":\"${mefQuery.eventType}\",\n          \"event\":{\n            \"id\":\"\"\n          }\n        }\n      responseBody:\n",
        "memory:console-core/mef-lso-sonata-api/template-upgrade/release.1.2.3.yaml": "---\nkind: kraken.product.template-upgrade\napiVersion: v1\nmetadata:\n  key: kraken.product.template-upgrade.1.2.3\n  name: V1.2.3\n  labels:\n    release-version: V1.2.3\n    release-date: 2024-09-04\n  description: |\n    add field mapping:\n      add metroId for address validation and address retrieve\n    new feature:\n\n  version: 1\n",
        "memory:console-core/mef-lso-sonata-api/mapping-matrix/mapping.matrix.address.validation.yaml": "---\nkind: kraken.product.mapping.matrix\napiVersion: v1\nmetadata:\n  key: mef.sonata.api.matrix.address.validation\n  name: MEF Sonata API\n  labels:\n    mef-api-release: grace\n  version: 10\nspec:\n  matrix:\n    mef.sonata.api-target.address.validate:\n      - name: provide_alternative_true\n        path: \"$.body.provideAlternative\"\n        expected: true\n      - name: address_type_FieldedAddress\n        path: \"$.body.submittedGeographicAddress.['@type']\"\n        expected: FieldedAddress\n\n\n",
        "memory:console-core/mef-lso-sonata-api/api-targets-mappers/api-target-mapper.product.offering.uni.add.yaml": "---\nkind: kraken.component.api-target-mapper\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target-mapper.poq.uni.add\n  name: Product Offering Qualification (POQ) API\n  description: |\n    A request initiated by the Buyer to determine whether the Seller is\n    able to deliver a product or set of products from among their product\n    offerings, at the Buyer's location(s); or modify a previously purchased\n    product. The Seller also provides estimated time intervals to complete\n    these deliveries. Reference: MEF 79 (Sn 8.4).\nspec:\n  trigger:\n    path: /mefApi/sonata/productOfferingQualification/v7/productOfferingQualification\n    method: post\n    productType: uni\n    actionType: add\n  endpoints:\n    - id: create a product offering qualification for port\n      path: \"\"\n      method: \"\"\n      mappers:\n        request:\n        response:\n          - name: mapper.poq.uni.add.itemState\n            title: POQ Item State Mapping\n            description: POQ Item state mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{itemState}}\"\n            targetType: enum\n            targetLocation: BODY\n            targetValues:\n              - acknowledged\n              - done.ready\n              - done.abandoned\n              - terminatedWithError\n              - approved.orderableAlternate\n              - inProgress\n            valueMapping: {}\n            defaultValue: \"done.ready\"\n            requiredMapping: false\n          - name: mapper.poq.uni.add.state\n            title: POQ State Mapping\n            description: POQ state mapping\n            source: \"\"\n            sourceLocation: \"\"\n            target: \"@{{state}}\"\n            targetType: enum\n            targetLocation: BODY\n            targetValues:\n              - acknowledged\n              - done.ready\n              - done.unableToProvide\n              - terminatedWithError\n              - approved.orderableAlternate\n              - inProgress\n            valueMapping: {}\n            defaultValue: \"done.ready\"\n            requiredMapping: false",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.quote.eline.add.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.quote.eline.add\n  name: Quote Connection API\n  mapperKey: mef.sonata.api-target-mapper.quote.eline.add\n  version: 1\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n  trigger:\n    path: /mefApi/sonata/quoteManagement/v8/quote\n    method: post\n    productType: access_e_line\n    actionType: add\n  endpoints:\n    - id: create quote for connection\n      path:\n      method:\n      requestBody: ${mefRequestBody.quoteItem[0].product.productConfiguration.access_e_line}\n      responseBody: |\n        {\n         \"id\":\"${entity.id}\",\n         \"relatedContactInformation\":\"${T(com.consoleconnect.kraken.operator.gateway.func.SpelFunc).appendSellerInformation(env.seller.role, env.seller.name, env.seller.emailAddress, env.seller.number, mefRequestBody.relatedContactInformation)}\",\n         \"buyerRequestedQuoteLevel\":\"${mefRequestBody.buyerRequestedQuoteLevel}\",\n         \"quoteItem\":[{\n             \"product\":\"${mefRequestBody.quoteItem[0].product}\",\n             \"state\":\"@{{quoteItem[*].state}}\",\n             \"quoteItemPrice\":[{\n               \"price\":{\n                 \"dutyFreeAmount\":{\n                   \"unit\":\"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.unit}}\",\n                   \"value\":\"@{{quoteItem.quoteItemPrice.price.dutyFreeAmount.value}}\"\n                 }\n               }\n             }]\n           }],\n         \"quoteDate\":\"${T(com.consoleconnect.kraken.operator.core.toolkit.DateTime).nowInUTCFormatted()}\",\n         \"externalId\":\"${mefRequestBody[externalId]?:''}\",\n         \"instantSyncQuote\":\"${mefRequestBody[instantSyncQuote]?:''}\",\n         \"requestedQuoteCompletionDate\":\"${mefRequestBody[requestedQuoteCompletionDate]?:''}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/api-targets/api-target.product.offering.uni.read.yaml": "---\nkind: kraken.component.api-target\napiVersion: v1\nmetadata:\n  key: mef.sonata.api-target.poq.uni.read\n  name: Product Offering Qualification (POQ) API\n  mapperKey: mef.sonata.api-target-mapper.poq.uni.read\n  version: 1\nspec:\n  inputs:\n    - mefQuery\n    - mefRequestBody\n  trigger:\n    path: /mefApi/sonata/productOfferingQualification/v7/productOfferingQualification/{id}\n    method: get\n    productType: uni\n  endpoints:\n    - id: Retrieves a product offering qualification by id for port\n      path: \"\"\n      method: \"\"\n      requestBody: ${entity.request.productOfferingQualificationItem[0].product.productConfiguration.uni}\n      responseBody: |\n        {\n          \"id\":\"${entity.id}\",\n          \"productOfferingQualificationItem\":[{\n              \"product\":\"${entity.request.productOfferingQualificationItem[0].product}\",\n              \"action\":\"${entity.request.productOfferingQualificationItem[0].action}\",\n              \"id\":\"${entity.request.productOfferingQualificationItem[0].id}\",\n              \"state\":\"@{{itemState}}\"\n           }],\n          \"relatedContactInformation\":\"${entity.request.relatedContactInformation}\",\n          \"state\":\"@{{state}}\"\n        }",
        "memory:console-core/mef-lso-sonata-api/kraken.yaml": "---\nkind: kraken.mgmt.product\napiVersion: v1\nmetadata:\n  key: mef.sonata\n  name: MEF LSO 3.0 Sonata\n  description: xxxxxxxx\n  icon: https://storage.googleapis.com/console-connect-static-assets/catacomb/bigquery.png\n  version: 1\nfacets:\n  versions:\n    - version: grace\n      path: /v1\n    - version: ",
        "memory:console-core/mef-lso-sonata-api/template-upgrade/release.1.2.0.yaml": "---\nkind: kraken.product.template-upgrade\napiVersion: v1\nmetadata:\n  key: kraken.product.template-upgrade.1.2.0\n  name: V1.2\n  labels:\n    release-version: V1.2\n    release-date: 2024-08-30\n  description: |\n    fix issues:\n      upgrade all user mapper and target file\n    new feature:\n      support template upgrade\n      audit logs\n\n  version: 1\n\n"
      }
    },
    "links": [],
    "id": "5cdd7365-e54d-4e01-a034-29fffaeef9da",
    "parentId": "71cc6641-9491-40f7-9825-ef6f105309eb",
    "createdAt": "2024-09-10T08:35:13.711054Z",
    "updatedAt": "2024-09-10T08:35:13.714589Z",
    "syncMetadata": {
      "fullPath": "",
      "syncedSha": "",
      "syncedAt": "2024-09-10T08:35:13.701467094Z"
    }
  }
}